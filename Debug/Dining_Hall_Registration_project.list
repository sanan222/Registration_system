
Dining_Hall_Registration_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006144  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080062cc  080062cc  000162cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800630c  0800630c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  0800630c  0800630c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800630c  0800630c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800630c  0800630c  0001630c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006310  08006310  00016310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08006314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000020  08006334  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08006334  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130e8  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273a  00000000  00000000  00033138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00035878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  00036b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d95  00000000  00000000  00037d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a39  00000000  00000000  00060ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001031d9  00000000  00000000  0007551e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001786f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005100  00000000  00000000  00178748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080062b4 	.word	0x080062b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	080062b4 	.word	0x080062b4

080001c8 <HAL_GPIO_EXTI_Callback>:
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

// Activating interrupt function to perform change between 2 modes
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	mode = mode + 1;
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <HAL_GPIO_EXTI_Callback+0x30>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	3301      	adds	r3, #1
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <HAL_GPIO_EXTI_Callback+0x30>)
 80001dc:	701a      	strb	r2, [r3, #0]
	if(mode>1)
 80001de:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <HAL_GPIO_EXTI_Callback+0x30>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d902      	bls.n	80001ec <HAL_GPIO_EXTI_Callback+0x24>
	{
		mode = 0;
 80001e6:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <HAL_GPIO_EXTI_Callback+0x30>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	701a      	strb	r2, [r3, #0]
	}
}
 80001ec:	bf00      	nop
 80001ee:	370c      	adds	r7, #12
 80001f0:	46bd      	mov	sp, r7
 80001f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f6:	4770      	bx	lr
 80001f8:	200001d4 	.word	0x200001d4

080001fc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	if (hadc->Instance==ADC1)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a08      	ldr	r2, [pc, #32]	; (800022c <HAL_ADC_ConvCpltCallback+0x30>)
 800020a:	4293      	cmp	r3, r2
 800020c:	d107      	bne.n	800021e <HAL_ADC_ConvCpltCallback+0x22>
	{
		data[0] = adcbuffer[0];
 800020e:	4b08      	ldr	r3, [pc, #32]	; (8000230 <HAL_ADC_ConvCpltCallback+0x34>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <HAL_ADC_ConvCpltCallback+0x38>)
 8000214:	6013      	str	r3, [r2, #0]
		data[1] = adcbuffer[1];
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <HAL_ADC_ConvCpltCallback+0x34>)
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	4a06      	ldr	r2, [pc, #24]	; (8000234 <HAL_ADC_ConvCpltCallback+0x38>)
 800021c:	6053      	str	r3, [r2, #4]
	}
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	50040000 	.word	0x50040000
 8000230:	200001cc 	.word	0x200001cc
 8000234:	200001c4 	.word	0x200001c4

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023e:	f001 f8c1 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000242:	f000 f903 	bl	800044c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000246:	f000 fae3 	bl	8000810 <MX_GPIO_Init>
  MX_DMA_Init();
 800024a:	f000 fac3 	bl	80007d4 <MX_DMA_Init>
  MX_ADC1_Init();
 800024e:	f000 f94f 	bl	80004f0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000252:	f000 f9d3 	bl	80005fc <MX_SPI1_Init>
  MX_TIM1_Init();
 8000256:	f000 fa0f 	bl	8000678 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Activating PWM channel for Servo motor (TIM1 Channel 1)
 800025a:	2100      	movs	r1, #0
 800025c:	486e      	ldr	r0, [pc, #440]	; (8000418 <main+0x1e0>)
 800025e:	f004 ffe3 	bl	8005228 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Mode1 activates RFID tag and reading RFID if ID is that of ours servo motor is activates, otherwise the buzzer starts to work like an alarm //
	  if (mode == 0)
 8000262:	4b6e      	ldr	r3, [pc, #440]	; (800041c <main+0x1e4>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	f040 8097 	bne.w	800039a <main+0x162>
	  	  {
	  		  status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 800026c:	496c      	ldr	r1, [pc, #432]	; (8000420 <main+0x1e8>)
 800026e:	2026      	movs	r0, #38	; 0x26
 8000270:	f000 fce2 	bl	8000c38 <MFRC522_Request>
 8000274:	4603      	mov	r3, r0
 8000276:	461a      	mov	r2, r3
 8000278:	4b6a      	ldr	r3, [pc, #424]	; (8000424 <main+0x1ec>)
 800027a:	701a      	strb	r2, [r3, #0]
	  		  status = MFRC522_Anticoll(str);//Take a collision, look up 5 bytes
 800027c:	4868      	ldr	r0, [pc, #416]	; (8000420 <main+0x1e8>)
 800027e:	f000 fd00 	bl	8000c82 <MFRC522_Anticoll>
 8000282:	4603      	mov	r3, r0
 8000284:	461a      	mov	r2, r3
 8000286:	4b67      	ldr	r3, [pc, #412]	; (8000424 <main+0x1ec>)
 8000288:	701a      	strb	r2, [r3, #0]
	  		  memcpy(serNum, str, 5);//function for c language:(para1:that place save data,para2:the the source of data,para3:size)
 800028a:	4b67      	ldr	r3, [pc, #412]	; (8000428 <main+0x1f0>)
 800028c:	4a64      	ldr	r2, [pc, #400]	; (8000420 <main+0x1e8>)
 800028e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000292:	6018      	str	r0, [r3, #0]
 8000294:	3304      	adds	r3, #4
 8000296:	7019      	strb	r1, [r3, #0]

	  		  if (status == MI_OK)
 8000298:	4b62      	ldr	r3, [pc, #392]	; (8000424 <main+0x1ec>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d17c      	bne.n	800039a <main+0x162>
	  		  {

	  		  		//*******************************Read and write on block tag*************************//

	  		     MFRC522_SelectTag(str);
 80002a0:	485f      	ldr	r0, [pc, #380]	; (8000420 <main+0x1e8>)
 80002a2:	f000 fd74 	bl	8000d8e <MFRC522_SelectTag>
	  		     test = MFRC522_Auth(PICC_AUTHENT1A,24,KEY,serNum);
 80002a6:	4b60      	ldr	r3, [pc, #384]	; (8000428 <main+0x1f0>)
 80002a8:	4a60      	ldr	r2, [pc, #384]	; (800042c <main+0x1f4>)
 80002aa:	2118      	movs	r1, #24
 80002ac:	2060      	movs	r0, #96	; 0x60
 80002ae:	f000 fdb0 	bl	8000e12 <MFRC522_Auth>
 80002b2:	4603      	mov	r3, r0
 80002b4:	461a      	mov	r2, r3
 80002b6:	4b5e      	ldr	r3, [pc, #376]	; (8000430 <main+0x1f8>)
 80002b8:	701a      	strb	r2, [r3, #0]
	  		     if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11)==0)
 80002ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c2:	f002 ffaf 	bl	8003224 <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d107      	bne.n	80002dc <main+0xa4>
	  		     {
	  		        status = MFRC522_Write((uint8_t)24 , W);
 80002cc:	4959      	ldr	r1, [pc, #356]	; (8000434 <main+0x1fc>)
 80002ce:	2018      	movs	r0, #24
 80002d0:	f000 fe2e 	bl	8000f30 <MFRC522_Write>
 80002d4:	4603      	mov	r3, r0
 80002d6:	461a      	mov	r2, r3
 80002d8:	4b52      	ldr	r3, [pc, #328]	; (8000424 <main+0x1ec>)
 80002da:	701a      	strb	r2, [r3, #0]

	  		     }
	  		     if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12)==0)
 80002dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e4:	f002 ff9e 	bl	8003224 <HAL_GPIO_ReadPin>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d107      	bne.n	80002fe <main+0xc6>
	  		     {
	  		  		 status = MFRC522_Read( 24, R);
 80002ee:	4952      	ldr	r1, [pc, #328]	; (8000438 <main+0x200>)
 80002f0:	2018      	movs	r0, #24
 80002f2:	f000 fdf1 	bl	8000ed8 <MFRC522_Read>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b4a      	ldr	r3, [pc, #296]	; (8000424 <main+0x1ec>)
 80002fc:	701a      	strb	r2, [r3, #0]
	  		     }

	  		     // In this section if card number is that of ours, the servo motor is activated, otherwise buzzer alarm is activated //
	  		     // str keeps the numerical details of ID card
	  		     // Numbers like 38, 32, 108, 166, 13 is that of my ID
	  		     if((str[0]==38) || (str[1]==32) || (str[2]==108) || (str[3]==166) || (str[3]==13) )
 80002fe:	4b48      	ldr	r3, [pc, #288]	; (8000420 <main+0x1e8>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b26      	cmp	r3, #38	; 0x26
 8000304:	d00f      	beq.n	8000326 <main+0xee>
 8000306:	4b46      	ldr	r3, [pc, #280]	; (8000420 <main+0x1e8>)
 8000308:	785b      	ldrb	r3, [r3, #1]
 800030a:	2b20      	cmp	r3, #32
 800030c:	d00b      	beq.n	8000326 <main+0xee>
 800030e:	4b44      	ldr	r3, [pc, #272]	; (8000420 <main+0x1e8>)
 8000310:	789b      	ldrb	r3, [r3, #2]
 8000312:	2b6c      	cmp	r3, #108	; 0x6c
 8000314:	d007      	beq.n	8000326 <main+0xee>
 8000316:	4b42      	ldr	r3, [pc, #264]	; (8000420 <main+0x1e8>)
 8000318:	78db      	ldrb	r3, [r3, #3]
 800031a:	2ba6      	cmp	r3, #166	; 0xa6
 800031c:	d003      	beq.n	8000326 <main+0xee>
 800031e:	4b40      	ldr	r3, [pc, #256]	; (8000420 <main+0x1e8>)
 8000320:	78db      	ldrb	r3, [r3, #3]
 8000322:	2b0d      	cmp	r3, #13
 8000324:	d11c      	bne.n	8000360 <main+0x128>
	  		     {
	  		    	 htim1.Instance->CCR1 = 25;  // duty cycle is .5 ms
 8000326:	4b3c      	ldr	r3, [pc, #240]	; (8000418 <main+0x1e0>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2219      	movs	r2, #25
 800032c:	635a      	str	r2, [r3, #52]	; 0x34
	  		    	 HAL_Delay(2000);
 800032e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000332:	f001 f8c3 	bl	80014bc <HAL_Delay>
	  		    	 htim1.Instance->CCR1 = 75;  // duty cycle is 1.5 ms
 8000336:	4b38      	ldr	r3, [pc, #224]	; (8000418 <main+0x1e0>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	224b      	movs	r2, #75	; 0x4b
 800033c:	635a      	str	r2, [r3, #52]	; 0x34
	  		    	 HAL_Delay(2000);
 800033e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000342:	f001 f8bb 	bl	80014bc <HAL_Delay>
	  		    	 htim1.Instance->CCR1 = 125;  // duty cycle is 2.5 ms
 8000346:	4b34      	ldr	r3, [pc, #208]	; (8000418 <main+0x1e0>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	227d      	movs	r2, #125	; 0x7d
 800034c:	635a      	str	r2, [r3, #52]	; 0x34
	  		    	 HAL_Delay(2000);
 800034e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000352:	f001 f8b3 	bl	80014bc <HAL_Delay>
	  		    	 HAL_Delay(1000);
 8000356:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035a:	f001 f8af 	bl	80014bc <HAL_Delay>
 800035e:	e01c      	b.n	800039a <main+0x162>
	  		     }
	  		     else
	  		     {
	  		    	 int i;
	  		    	 for (i = 1; i < 30; ++i)
 8000360:	2301      	movs	r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	e016      	b.n	8000394 <main+0x15c>
	  		    	 {
	  		    		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, 0);
 8000366:	2200      	movs	r2, #0
 8000368:	2101      	movs	r1, #1
 800036a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036e:	f002 ff71 	bl	8003254 <HAL_GPIO_WritePin>
	  		    		 HAL_Delay(1000);
 8000372:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000376:	f001 f8a1 	bl	80014bc <HAL_Delay>
	  		    		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, 1);
 800037a:	2201      	movs	r2, #1
 800037c:	2101      	movs	r1, #1
 800037e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000382:	f002 ff67 	bl	8003254 <HAL_GPIO_WritePin>
	  		    		 HAL_Delay(1000);
 8000386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800038a:	f001 f897 	bl	80014bc <HAL_Delay>
	  		    	 for (i = 1; i < 30; ++i)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	3301      	adds	r3, #1
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2b1d      	cmp	r3, #29
 8000398:	dde5      	ble.n	8000366 <main+0x12e>
	  		  }
	  		} // mode 1 ends here
	  // In case 2 pushing reset button once we change the sound delays of buzzer with using potentiometers
	  // In this condition we use 2 potentiometers which are connected with DMA channels
	  // To convert analog signal to digital we use ADC module in STM32-Nucleo board
	  if (mode == 1)
 800039a:	4b20      	ldr	r3, [pc, #128]	; (800041c <main+0x1e4>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	f47f af5f 	bne.w	8000262 <main+0x2a>
	  {
		  HAL_ADC_Start_DMA(&hadc1, adcbuffer, 2); // DMA is activated which collects two data from two channels to adcbuffer array
 80003a4:	2202      	movs	r2, #2
 80003a6:	4925      	ldr	r1, [pc, #148]	; (800043c <main+0x204>)
 80003a8:	4825      	ldr	r0, [pc, #148]	; (8000440 <main+0x208>)
 80003aa:	f001 fbd7 	bl	8001b5c <HAL_ADC_Start_DMA>
		  if (data[0] > 0)
 80003ae:	4b25      	ldr	r3, [pc, #148]	; (8000444 <main+0x20c>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d015      	beq.n	80003e2 <main+0x1aa>
		  {
		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1); // Buzzer is activated
 80003b6:	2201      	movs	r2, #1
 80003b8:	2101      	movs	r1, #1
 80003ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003be:	f002 ff49 	bl	8003254 <HAL_GPIO_WritePin>
		  	  HAL_Delay(data[0]); // delay time is same with the value given by first potentiometer
 80003c2:	4b20      	ldr	r3, [pc, #128]	; (8000444 <main+0x20c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 f878 	bl	80014bc <HAL_Delay>
		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0); // Buzzer is deactivated
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d4:	f002 ff3e 	bl	8003254 <HAL_GPIO_WritePin>
		  	  HAL_Delay(data[0]);
 80003d8:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <main+0x20c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4618      	mov	r0, r3
 80003de:	f001 f86d 	bl	80014bc <HAL_Delay>
		  }
		  if (data[1] > 0)
 80003e2:	4b18      	ldr	r3, [pc, #96]	; (8000444 <main+0x20c>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	f43f af3b 	beq.w	8000262 <main+0x2a>
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); // LED is activated
 80003ec:	2201      	movs	r2, #1
 80003ee:	2101      	movs	r1, #1
 80003f0:	4815      	ldr	r0, [pc, #84]	; (8000448 <main+0x210>)
 80003f2:	f002 ff2f 	bl	8003254 <HAL_GPIO_WritePin>
			  HAL_Delay(data[1]); // delay time is same with the value given by second potentiometer
 80003f6:	4b13      	ldr	r3, [pc, #76]	; (8000444 <main+0x20c>)
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 f85e 	bl	80014bc <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0); // LED is deactivated
 8000400:	2200      	movs	r2, #0
 8000402:	2101      	movs	r1, #1
 8000404:	4810      	ldr	r0, [pc, #64]	; (8000448 <main+0x210>)
 8000406:	f002 ff25 	bl	8003254 <HAL_GPIO_WritePin>
			  HAL_Delay(data[1]);
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <main+0x20c>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	4618      	mov	r0, r3
 8000410:	f001 f854 	bl	80014bc <HAL_Delay>
	  if (mode == 0)
 8000414:	e725      	b.n	8000262 <main+0x2a>
 8000416:	bf00      	nop
 8000418:	2000014c 	.word	0x2000014c
 800041c:	200001d4 	.word	0x200001d4
 8000420:	2000019c 	.word	0x2000019c
 8000424:	20000198 	.word	0x20000198
 8000428:	200001ac 	.word	0x200001ac
 800042c:	20000000 	.word	0x20000000
 8000430:	200001b1 	.word	0x200001b1
 8000434:	20000008 	.word	0x20000008
 8000438:	200001b4 	.word	0x200001b4
 800043c:	200001cc 	.word	0x200001cc
 8000440:	2000003c 	.word	0x2000003c
 8000444:	200001c4 	.word	0x200001c4
 8000448:	48000800 	.word	0x48000800

0800044c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b096      	sub	sp, #88	; 0x58
 8000450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	2244      	movs	r2, #68	; 0x44
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f005 ff22 	bl	80062a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000460:	463b      	mov	r3, r7
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800046e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000472:	f002 ff2d 	bl	80032d0 <HAL_PWREx_ControlVoltageScaling>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800047c:	f000 fa6a 	bl	8000954 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000480:	2302      	movs	r3, #2
 8000482:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000488:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048a:	2310      	movs	r3, #16
 800048c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048e:	2302      	movs	r3, #2
 8000490:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000492:	2302      	movs	r3, #2
 8000494:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000496:	2301      	movs	r3, #1
 8000498:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800049a:	230a      	movs	r3, #10
 800049c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800049e:	2307      	movs	r3, #7
 80004a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004a2:	2302      	movs	r3, #2
 80004a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004a6:	2302      	movs	r3, #2
 80004a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 ff64 	bl	800337c <HAL_RCC_OscConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004ba:	f000 fa4b 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004be:	230f      	movs	r3, #15
 80004c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c2:	2303      	movs	r3, #3
 80004c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004d2:	463b      	mov	r3, r7
 80004d4:	2102      	movs	r1, #2
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 fb2c 	bl	8003b34 <HAL_RCC_ClockConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004e2:	f000 fa37 	bl	8000954 <Error_Handler>
  }
}
 80004e6:	bf00      	nop
 80004e8:	3758      	adds	r7, #88	; 0x58
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004f6:	f107 031c 	add.w	r3, r7, #28
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
 8000510:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000512:	4b36      	ldr	r3, [pc, #216]	; (80005ec <MX_ADC1_Init+0xfc>)
 8000514:	4a36      	ldr	r2, [pc, #216]	; (80005f0 <MX_ADC1_Init+0x100>)
 8000516:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000518:	4b34      	ldr	r3, [pc, #208]	; (80005ec <MX_ADC1_Init+0xfc>)
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800051e:	4b33      	ldr	r3, [pc, #204]	; (80005ec <MX_ADC1_Init+0xfc>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000524:	4b31      	ldr	r3, [pc, #196]	; (80005ec <MX_ADC1_Init+0xfc>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800052a:	4b30      	ldr	r3, [pc, #192]	; (80005ec <MX_ADC1_Init+0xfc>)
 800052c:	2201      	movs	r2, #1
 800052e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000530:	4b2e      	ldr	r3, [pc, #184]	; (80005ec <MX_ADC1_Init+0xfc>)
 8000532:	2204      	movs	r2, #4
 8000534:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000536:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <MX_ADC1_Init+0xfc>)
 8000538:	2200      	movs	r2, #0
 800053a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800053c:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <MX_ADC1_Init+0xfc>)
 800053e:	2200      	movs	r2, #0
 8000540:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000542:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <MX_ADC1_Init+0xfc>)
 8000544:	2202      	movs	r2, #2
 8000546:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <MX_ADC1_Init+0xfc>)
 800054a:	2200      	movs	r2, #0
 800054c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000550:	4b26      	ldr	r3, [pc, #152]	; (80005ec <MX_ADC1_Init+0xfc>)
 8000552:	2200      	movs	r2, #0
 8000554:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000556:	4b25      	ldr	r3, [pc, #148]	; (80005ec <MX_ADC1_Init+0xfc>)
 8000558:	2200      	movs	r2, #0
 800055a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <MX_ADC1_Init+0xfc>)
 800055e:	2200      	movs	r2, #0
 8000560:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <MX_ADC1_Init+0xfc>)
 8000566:	2200      	movs	r2, #0
 8000568:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800056a:	4b20      	ldr	r3, [pc, #128]	; (80005ec <MX_ADC1_Init+0xfc>)
 800056c:	2200      	movs	r2, #0
 800056e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000572:	481e      	ldr	r0, [pc, #120]	; (80005ec <MX_ADC1_Init+0xfc>)
 8000574:	f001 f99c 	bl	80018b0 <HAL_ADC_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800057e:	f000 f9e9 	bl	8000954 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	4619      	mov	r1, r3
 800058c:	4817      	ldr	r0, [pc, #92]	; (80005ec <MX_ADC1_Init+0xfc>)
 800058e:	f002 f8e5 	bl	800275c <HAL_ADCEx_MultiModeConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000598:	f000 f9dc 	bl	8000954 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <MX_ADC1_Init+0x104>)
 800059e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a0:	2306      	movs	r3, #6
 80005a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80005a4:	2304      	movs	r3, #4
 80005a6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005a8:	237f      	movs	r3, #127	; 0x7f
 80005aa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ac:	2304      	movs	r3, #4
 80005ae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4619      	mov	r1, r3
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <MX_ADC1_Init+0xfc>)
 80005ba:	f001 fb9f 	bl	8001cfc <HAL_ADC_ConfigChannel>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80005c4:	f000 f9c6 	bl	8000954 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <MX_ADC1_Init+0x108>)
 80005ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005cc:	230c      	movs	r3, #12
 80005ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_ADC1_Init+0xfc>)
 80005d6:	f001 fb91 	bl	8001cfc <HAL_ADC_ConfigChannel>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80005e0:	f000 f9b8 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	3728      	adds	r7, #40	; 0x28
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	2000003c 	.word	0x2000003c
 80005f0:	50040000 	.word	0x50040000
 80005f4:	19200040 	.word	0x19200040
 80005f8:	25b00200 	.word	0x25b00200

080005fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_SPI1_Init+0x74>)
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <MX_SPI1_Init+0x78>)
 8000604:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_SPI1_Init+0x74>)
 8000608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800060c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_SPI1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_SPI1_Init+0x74>)
 8000616:	f44f 7240 	mov.w	r2, #768	; 0x300
 800061a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_SPI1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_SPI1_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_SPI1_Init+0x74>)
 800062a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800062e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_SPI1_Init+0x74>)
 8000632:	2210      	movs	r2, #16
 8000634:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_SPI1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_SPI1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_SPI1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_SPI1_Init+0x74>)
 800064a:	2207      	movs	r2, #7
 800064c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_SPI1_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_SPI1_Init+0x74>)
 8000656:	2208      	movs	r2, #8
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_SPI1_Init+0x74>)
 800065c:	f004 f912 	bl	8004884 <HAL_SPI_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000666:	f000 f975 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200000e8 	.word	0x200000e8
 8000674:	40013000 	.word	0x40013000

08000678 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b09a      	sub	sp, #104	; 0x68
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000698:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]
 80006aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	222c      	movs	r2, #44	; 0x2c
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fdf6 	bl	80062a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006b8:	4b44      	ldr	r3, [pc, #272]	; (80007cc <MX_TIM1_Init+0x154>)
 80006ba:	4a45      	ldr	r2, [pc, #276]	; (80007d0 <MX_TIM1_Init+0x158>)
 80006bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 400;
 80006be:	4b43      	ldr	r3, [pc, #268]	; (80007cc <MX_TIM1_Init+0x154>)
 80006c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c6:	4b41      	ldr	r3, [pc, #260]	; (80007cc <MX_TIM1_Init+0x154>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80006cc:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <MX_TIM1_Init+0x154>)
 80006ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d4:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <MX_TIM1_Init+0x154>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006da:	4b3c      	ldr	r3, [pc, #240]	; (80007cc <MX_TIM1_Init+0x154>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e0:	4b3a      	ldr	r3, [pc, #232]	; (80007cc <MX_TIM1_Init+0x154>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006e6:	4839      	ldr	r0, [pc, #228]	; (80007cc <MX_TIM1_Init+0x154>)
 80006e8:	f004 fce6 	bl	80050b8 <HAL_TIM_Base_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80006f2:	f000 f92f 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000700:	4619      	mov	r1, r3
 8000702:	4832      	ldr	r0, [pc, #200]	; (80007cc <MX_TIM1_Init+0x154>)
 8000704:	f004 ffaa 	bl	800565c <HAL_TIM_ConfigClockSource>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800070e:	f000 f921 	bl	8000954 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000712:	482e      	ldr	r0, [pc, #184]	; (80007cc <MX_TIM1_Init+0x154>)
 8000714:	f004 fd27 	bl	8005166 <HAL_TIM_PWM_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800071e:	f000 f919 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000722:	2300      	movs	r3, #0
 8000724:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000726:	2300      	movs	r3, #0
 8000728:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800072e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000732:	4619      	mov	r1, r3
 8000734:	4825      	ldr	r0, [pc, #148]	; (80007cc <MX_TIM1_Init+0x154>)
 8000736:	f005 fc8b 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000740:	f000 f908 	bl	8000954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000744:	2360      	movs	r3, #96	; 0x60
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800074c:	2300      	movs	r3, #0
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000750:	2300      	movs	r3, #0
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000764:	2200      	movs	r2, #0
 8000766:	4619      	mov	r1, r3
 8000768:	4818      	ldr	r0, [pc, #96]	; (80007cc <MX_TIM1_Init+0x154>)
 800076a:	f004 fe63 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000774:	f000 f8ee 	bl	8000954 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800078c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000790:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800079a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	4807      	ldr	r0, [pc, #28]	; (80007cc <MX_TIM1_Init+0x154>)
 80007ae:	f005 fcd7 	bl	8006160 <HAL_TIMEx_ConfigBreakDeadTime>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80007b8:	f000 f8cc 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <MX_TIM1_Init+0x154>)
 80007be:	f000 fd51 	bl	8001264 <HAL_TIM_MspPostInit>

}
 80007c2:	bf00      	nop
 80007c4:	3768      	adds	r7, #104	; 0x68
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000014c 	.word	0x2000014c
 80007d0:	40012c00 	.word	0x40012c00

080007d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_DMA_Init+0x38>)
 80007dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <MX_DMA_Init+0x38>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6493      	str	r3, [r2, #72]	; 0x48
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_DMA_Init+0x38>)
 80007e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	200b      	movs	r0, #11
 80007f8:	f002 f93b 	bl	8002a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007fc:	200b      	movs	r0, #11
 80007fe:	f002 f954 	bl	8002aaa <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b48      	ldr	r3, [pc, #288]	; (8000948 <MX_GPIO_Init+0x138>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a47      	ldr	r2, [pc, #284]	; (8000948 <MX_GPIO_Init+0x138>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b45      	ldr	r3, [pc, #276]	; (8000948 <MX_GPIO_Init+0x138>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	4b42      	ldr	r3, [pc, #264]	; (8000948 <MX_GPIO_Init+0x138>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a41      	ldr	r2, [pc, #260]	; (8000948 <MX_GPIO_Init+0x138>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b3f      	ldr	r3, [pc, #252]	; (8000948 <MX_GPIO_Init+0x138>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b3c      	ldr	r3, [pc, #240]	; (8000948 <MX_GPIO_Init+0x138>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a3b      	ldr	r2, [pc, #236]	; (8000948 <MX_GPIO_Init+0x138>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b39      	ldr	r3, [pc, #228]	; (8000948 <MX_GPIO_Init+0x138>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b36      	ldr	r3, [pc, #216]	; (8000948 <MX_GPIO_Init+0x138>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a35      	ldr	r2, [pc, #212]	; (8000948 <MX_GPIO_Init+0x138>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b33      	ldr	r3, [pc, #204]	; (8000948 <MX_GPIO_Init+0x138>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2101      	movs	r1, #1
 800088a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088e:	f002 fce1 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFID_SDA_GPIO_Port, RFID_SDA_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000898:	482c      	ldr	r0, [pc, #176]	; (800094c <MX_GPIO_Init+0x13c>)
 800089a:	f002 fcdb 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800089e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4826      	ldr	r0, [pc, #152]	; (8000950 <MX_GPIO_Init+0x140>)
 80008b6:	f002 fb0b 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80008ba:	2301      	movs	r3, #1
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d4:	f002 fafc 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008d8:	2301      	movs	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4817      	ldr	r0, [pc, #92]	; (800094c <MX_GPIO_Init+0x13c>)
 80008f0:	f002 faee 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFID_SDA_Pin */
  GPIO_InitStruct.Pin = RFID_SDA_Pin;
 80008f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4810      	ldr	r0, [pc, #64]	; (8000950 <MX_GPIO_Init+0x140>)
 800090e:	f002 fadf 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4809      	ldr	r0, [pc, #36]	; (8000950 <MX_GPIO_Init+0x140>)
 800092a:	f002 fad1 	bl	8002ed0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2028      	movs	r0, #40	; 0x28
 8000934:	f002 f89d 	bl	8002a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000938:	2028      	movs	r0, #40	; 0x28
 800093a:	f002 f8b6 	bl	8002aaa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	; 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000
 800094c:	48000400 	.word	0x48000400
 8000950:	48000800 	.word	0x48000800

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <RC522_SPI_Transfer>:
 * Chuc nang: wait 1 byte is stored in register MFRC522
 * Input:addr-> I just wrote down, val-> Value to record
 * Check: No
 */
uint8_t RC522_SPI_Transfer(uint8_t data)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af02      	add	r7, sp, #8
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(&hspi1,&data,&rx_data,1,100);
 800096a:	f107 020f 	add.w	r2, r7, #15
 800096e:	1df9      	adds	r1, r7, #7
 8000970:	2364      	movs	r3, #100	; 0x64
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2301      	movs	r3, #1
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <RC522_SPI_Transfer+0x28>)
 8000978:	f004 f827 	bl	80049ca <HAL_SPI_TransmitReceive>
	/*while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_TXE)==RESET);
	SPI_I2S_SendData(MFRC522_SPI,data);

	while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_RXNE)==RESET);
	return SPI_I2S_ReceiveData(MFRC522_SPI);*/
	return rx_data;
 800097c:	7bfb      	ldrb	r3, [r7, #15]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000e8 	.word	0x200000e8

0800098c <Write_MFRC522>:
 * Note: wait 1 byte is stored in register MFRC522
 * Input: addr-> DIa write only, val-> Value to write
 * Check: No
 */
void Write_MFRC522(uint8_t addr, uint8_t val)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	460a      	mov	r2, r1
 8000996:	71fb      	strb	r3, [r7, #7]
 8000998:	4613      	mov	r3, r2
 800099a:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <Write_MFRC522+0x4c>)
 80009a4:	f002 fc56 	bl	8003254 <HAL_GPIO_WritePin>
	//The address is located:0XXXXXX0
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ffd3 	bl	8000960 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80009ba:	79bb      	ldrb	r3, [r7, #6]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ffcf 	bl	8000960 <RC522_SPI_Transfer>
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <Write_MFRC522+0x4c>)
 80009ca:	f002 fc43 	bl	8003254 <HAL_GPIO_WritePin>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	48000400 	.word	0x48000400

080009dc <Read_MFRC522>:
 * Note: A 1-byte doc is stored from a register MFRC522
 * Input: addr-> address doc
 * Look up: Value in the read register
 */
uint8_t Read_MFRC522(uint8_t addr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ec:	480f      	ldr	r0, [pc, #60]	; (8000a2c <Read_MFRC522+0x50>)
 80009ee:	f002 fc31 	bl	8003254 <HAL_GPIO_WritePin>

	//The address is located:1XXXXXX0
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ffaa 	bl	8000960 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f7ff ffa7 	bl	8000960 <RC522_SPI_Transfer>
 8000a12:	4603      	mov	r3, r0
 8000a14:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <Read_MFRC522+0x50>)
 8000a1e:	f002 fc19 	bl	8003254 <HAL_GPIO_WritePin>
	return val;	
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	48000400 	.word	0x48000400

08000a30 <SetBitMask>:
 * Note: Set bits in an MFRC522 register
 * Input: reg - Registers settings; mask - value set
 * Check: No
 */
void SetBitMask(uint8_t reg, uint8_t mask)  
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	460a      	mov	r2, r1
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ffca 	bl	80009dc <Read_MFRC522>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000a4c:	7bfa      	ldrb	r2, [r7, #15]
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff97 	bl	800098c <Write_MFRC522>
}
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <ClearBitMask>:
 * Note: Reset bit in register MFRC522
 * Input: reg - Dia register; mask - Value bit can clear
 * Check: No
 */
void ClearBitMask(uint8_t reg, uint8_t mask)  
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b084      	sub	sp, #16
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	460a      	mov	r2, r1
 8000a70:	71fb      	strb	r3, [r7, #7]
 8000a72:	4613      	mov	r3, r2
 8000a74:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ffaf 	bl	80009dc <Read_MFRC522>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000a82:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a86:	43db      	mvns	r3, r3
 8000a88:	b25a      	sxtb	r2, r3
 8000a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	b25b      	sxtb	r3, r3
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff77 	bl	800098c <Write_MFRC522>
} 
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <MFRC522_ToCard>:
 *			 backData - BackData is returned
 *			 backLen - Retrieve the data number
 * Check: MI_OK if successful
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen)
{
 8000aa6:	b590      	push	{r4, r7, lr}
 8000aa8:	b089      	sub	sp, #36	; 0x24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	73fb      	strb	r3, [r7, #15]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	77fb      	strb	r3, [r7, #31]
    uint8_t irqEn = 0x00;
 8000abc:	2300      	movs	r3, #0
 8000abe:	77bb      	strb	r3, [r7, #30]
    uint8_t waitIRq = 0x00;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	777b      	strb	r3, [r7, #29]
    uint8_t lastBits;
    uint8_t n;
    uint i;

    switch (command)
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	2b0c      	cmp	r3, #12
 8000ac8:	d006      	beq.n	8000ad8 <MFRC522_ToCard+0x32>
 8000aca:	2b0e      	cmp	r3, #14
 8000acc:	d109      	bne.n	8000ae2 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		//Acknowledging the liver
		{
			irqEn = 0x12;
 8000ace:	2312      	movs	r3, #18
 8000ad0:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	777b      	strb	r3, [r7, #29]
			break;
 8000ad6:	e005      	b.n	8000ae4 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// FIFO data collection
		{
			irqEn = 0x77;
 8000ad8:	2377      	movs	r3, #119	; 0x77
 8000ada:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000adc:	2330      	movs	r3, #48	; 0x30
 8000ade:	777b      	strb	r3, [r7, #29]
			break;
 8000ae0:	e000      	b.n	8000ae4 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000ae2:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	//Yeu cau ngat
 8000ae4:	7fbb      	ldrb	r3, [r7, #30]
 8000ae6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4619      	mov	r1, r3
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff ff4c 	bl	800098c <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			//Clear all the bits
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	2004      	movs	r0, #4
 8000af8:	f7ff ffb5 	bl	8000a66 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	200a      	movs	r0, #10
 8000b00:	f7ff ff96 	bl	8000a30 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	//NO action; Huy bo lenh hien hanh	???
 8000b04:	2100      	movs	r1, #0
 8000b06:	2001      	movs	r0, #1
 8000b08:	f7ff ff40 	bl	800098c <Write_MFRC522>

	// Record in FIFO
    for (i=0; i<sendLen; i++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
 8000b10:	e00a      	b.n	8000b28 <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	4413      	add	r3, r2
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	2009      	movs	r0, #9
 8000b1e:	f7ff ff35 	bl	800098c <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	3301      	adds	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	7bbb      	ldrb	r3, [r7, #14]
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d3f0      	bcc.n	8000b12 <MFRC522_ToCard+0x6c>
	}

	//chay
	Write_MFRC522(CommandReg, command);
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	4619      	mov	r1, r3
 8000b34:	2001      	movs	r0, #1
 8000b36:	f7ff ff29 	bl	800098c <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	2b0c      	cmp	r3, #12
 8000b3e:	d103      	bne.n	8000b48 <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts  
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	200d      	movs	r0, #13
 8000b44:	f7ff ff74 	bl	8000a30 <SetBitMask>
	}   
    
	//The team is allowed to be stored
	i = 2000;	//i tuy thuoc tan so thach anh, thoi gian toi da cho the M1 la 25ms
 8000b48:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b4c:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000b4e:	2004      	movs	r0, #4
 8000b50:	f7ff ff44 	bl	80009dc <Read_MFRC522>
 8000b54:	4603      	mov	r3, r0
 8000b56:	773b      	strb	r3, [r7, #28]
        i--;
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d00a      	beq.n	8000b7a <MFRC522_ToCard+0xd4>
 8000b64:	7f3b      	ldrb	r3, [r7, #28]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d105      	bne.n	8000b7a <MFRC522_ToCard+0xd4>
 8000b6e:	7f3a      	ldrb	r2, [r7, #28]
 8000b70:	7f7b      	ldrb	r3, [r7, #29]
 8000b72:	4013      	ands	r3, r2
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0e9      	beq.n	8000b4e <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	200d      	movs	r0, #13
 8000b7e:	f7ff ff72 	bl	8000a66 <ClearBitMask>
	
    if (i != 0)
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d052      	beq.n	8000c2e <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000b88:	2006      	movs	r0, #6
 8000b8a:	f7ff ff27 	bl	80009dc <Read_MFRC522>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	f003 031b 	and.w	r3, r3, #27
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d148      	bne.n	8000c2a <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000b9c:	7f3a      	ldrb	r2, [r7, #28]
 8000b9e:	7fbb      	ldrb	r3, [r7, #30]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;			//??   
 8000bac:	2301      	movs	r3, #1
 8000bae:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	2b0c      	cmp	r3, #12
 8000bb4:	d13b      	bne.n	8000c2e <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000bb6:	200a      	movs	r0, #10
 8000bb8:	f7ff ff10 	bl	80009dc <Read_MFRC522>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000bc0:	200c      	movs	r0, #12
 8000bc2:	f7ff ff0b 	bl	80009dc <Read_MFRC522>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000bce:	7dfb      	ldrb	r3, [r7, #23]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d008      	beq.n	8000be6 <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 8000bd4:	7f3b      	ldrb	r3, [r7, #28]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	00da      	lsls	r2, r3, #3
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
 8000bdc:	4413      	add	r3, r2
 8000bde:	461a      	mov	r2, r3
 8000be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	e004      	b.n	8000bf0 <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 8000be6:	7f3b      	ldrb	r3, [r7, #28]
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	461a      	mov	r2, r3
 8000bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bee:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8000bf0:	7f3b      	ldrb	r3, [r7, #28]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000bfa:	7f3b      	ldrb	r3, [r7, #28]
 8000bfc:	2b10      	cmp	r3, #16
 8000bfe:	d901      	bls.n	8000c04 <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 8000c00:	2310      	movs	r3, #16
 8000c02:	773b      	strb	r3, [r7, #28]
				}
				
				//FIFO doc in the received data
                for (i=0; i<n; i++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	e00a      	b.n	8000c20 <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	18d4      	adds	r4, r2, r3
 8000c10:	2009      	movs	r0, #9
 8000c12:	f7ff fee3 	bl	80009dc <Read_MFRC522>
 8000c16:	4603      	mov	r3, r0
 8000c18:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	61bb      	str	r3, [r7, #24]
 8000c20:	7f3b      	ldrb	r3, [r7, #28]
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d3f0      	bcc.n	8000c0a <MFRC522_ToCard+0x164>
 8000c28:	e001      	b.n	8000c2e <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8000c2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3724      	adds	r7, #36	; 0x24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}

08000c38 <MFRC522_Request>:
 *				0x0800 = Mifare_Pro(X)
 *				0x4403 = Mifare_DESFire
 * Return: MI_OK if the bar is curved
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint backBits;			//The bits are manipulated

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8000c44:	2107      	movs	r1, #7
 8000c46:	200d      	movs	r0, #13
 8000c48:	f7ff fea0 	bl	800098c <Write_MFRC522>
	
	TagType[0] = reqMode;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	79fa      	ldrb	r2, [r7, #7]
 8000c50:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	6839      	ldr	r1, [r7, #0]
 8000c5e:	200c      	movs	r0, #12
 8000c60:	f7ff ff21 	bl	8000aa6 <MFRC522_ToCard>
 8000c64:	4603      	mov	r3, r0
 8000c66:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <MFRC522_Request+0x3c>
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	2b10      	cmp	r3, #16
 8000c72:	d001      	beq.n	8000c78 <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 8000c74:	2302      	movs	r3, #2
 8000c76:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <MFRC522_Anticoll>:
 * Detect the collision, select and read the serial number
 * Input: serNum - Look up the serial the 4 byte, byte 5 is the ma checksum
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af02      	add	r7, sp, #8
 8000c88:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	737b      	strb	r3, [r7, #13]
    uint unLen;
    

    //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
    //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000c8e:	2100      	movs	r1, #0
 8000c90:	200d      	movs	r0, #13
 8000c92:	f7ff fe7b 	bl	800098c <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2293      	movs	r2, #147	; 0x93
 8000c9a:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	2220      	movs	r2, #32
 8000ca2:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2202      	movs	r2, #2
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	200c      	movs	r0, #12
 8000cb2:	f7ff fef8 	bl	8000aa6 <MFRC522_ToCard>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d118      	bne.n	8000cf2 <MFRC522_Anticoll+0x70>
	{
		//Check the serial number
		for (i=0; i<4; i++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	73bb      	strb	r3, [r7, #14]
 8000cc4:	e009      	b.n	8000cda <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	7b7b      	ldrb	r3, [r7, #13]
 8000cd0:	4053      	eors	r3, r2
 8000cd2:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8000cd4:	7bbb      	ldrb	r3, [r7, #14]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	73bb      	strb	r3, [r7, #14]
 8000cda:	7bbb      	ldrb	r3, [r7, #14]
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d9f2      	bls.n	8000cc6 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000ce0:	7bbb      	ldrb	r3, [r7, #14]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	7b7a      	ldrb	r2, [r7, #13]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d001      	beq.n	8000cf2 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8000cee:	2302      	movs	r3, #2
 8000cf0:	73fb      	strb	r3, [r7, #15]
		}
    }

    //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

    return status;
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
} 
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <CalulateCRC>:
 * MFRC522 is a formula of RC522
 * Input: pIndata - Data CRC into calculator, wool - Data data, pOutData - CRC calculation
 * Check: No
 */
void CalulateCRC(uint8_t *pIndata, uint8_t len, uint8_t *pOutData)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b087      	sub	sp, #28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	460b      	mov	r3, r1
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	72fb      	strb	r3, [r7, #11]
    uint8_t i, n;

    ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	2005      	movs	r0, #5
 8000d0e:	f7ff feaa 	bl	8000a66 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//Con tro FIFO
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	200a      	movs	r0, #10
 8000d16:	f7ff fe8b 	bl	8000a30 <SetBitMask>
    //Write_MFRC522(CommandReg, PCD_IDLE);

	//Record in FIFO
    for (i=0; i<len; i++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	75fb      	strb	r3, [r7, #23]
 8000d1e:	e00a      	b.n	8000d36 <CalulateCRC+0x3a>
    {   
		Write_MFRC522(FIFODataReg, *(pIndata+i));   
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	4413      	add	r3, r2
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	2009      	movs	r0, #9
 8000d2c:	f7ff fe2e 	bl	800098c <Write_MFRC522>
    for (i=0; i<len; i++)
 8000d30:	7dfb      	ldrb	r3, [r7, #23]
 8000d32:	3301      	adds	r3, #1
 8000d34:	75fb      	strb	r3, [r7, #23]
 8000d36:	7dfa      	ldrb	r2, [r7, #23]
 8000d38:	7afb      	ldrb	r3, [r7, #11]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d3f0      	bcc.n	8000d20 <CalulateCRC+0x24>
	}
    Write_MFRC522(CommandReg, PCD_CALCCRC);
 8000d3e:	2103      	movs	r1, #3
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff fe23 	bl	800098c <Write_MFRC522>

	// Let the CRC computer complete
    i = 0xFF;
 8000d46:	23ff      	movs	r3, #255	; 0xff
 8000d48:	75fb      	strb	r3, [r7, #23]
    do 
    {
        n = Read_MFRC522(DivIrqReg);
 8000d4a:	2005      	movs	r0, #5
 8000d4c:	f7ff fe46 	bl	80009dc <Read_MFRC522>
 8000d50:	4603      	mov	r3, r0
 8000d52:	75bb      	strb	r3, [r7, #22]
        i--;
 8000d54:	7dfb      	ldrb	r3, [r7, #23]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	75fb      	strb	r3, [r7, #23]
    }
    while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8000d5a:	7dfb      	ldrb	r3, [r7, #23]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d004      	beq.n	8000d6a <CalulateCRC+0x6e>
 8000d60:	7dbb      	ldrb	r3, [r7, #22]
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0ef      	beq.n	8000d4a <CalulateCRC+0x4e>

	//Doc results in CRC calculation
    pOutData[0] = Read_MFRC522(CRCResultRegL);
 8000d6a:	2022      	movs	r0, #34	; 0x22
 8000d6c:	f7ff fe36 	bl	80009dc <Read_MFRC522>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	701a      	strb	r2, [r3, #0]
    pOutData[1] = Read_MFRC522(CRCResultRegM);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	1c5c      	adds	r4, r3, #1
 8000d7c:	2021      	movs	r0, #33	; 0x21
 8000d7e:	f7ff fe2d 	bl	80009dc <Read_MFRC522>
 8000d82:	4603      	mov	r3, r0
 8000d84:	7023      	strb	r3, [r4, #0]
}
 8000d86:	bf00      	nop
 8000d88:	371c      	adds	r7, #28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd90      	pop	{r4, r7, pc}

08000d8e <MFRC522_SelectTag>:
 * read the right way
 * Input:serNum--So serial the
 * Check: Use the same amount of inspection
 */
uint8_t MFRC522_SelectTag(uint8_t *serNum)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b08a      	sub	sp, #40	; 0x28
 8000d92:	af02      	add	r7, sp, #8
 8000d94:	6078      	str	r0, [r7, #4]
	uint recvBits;
	uint8_t buffer[9]; 

	//ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0

    buffer[0] = PICC_SElECTTAG;
 8000d96:	2393      	movs	r3, #147	; 0x93
 8000d98:	733b      	strb	r3, [r7, #12]
    buffer[1] = 0x70;
 8000d9a:	2370      	movs	r3, #112	; 0x70
 8000d9c:	737b      	strb	r3, [r7, #13]
    for (i=0; i<5; i++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	77fb      	strb	r3, [r7, #31]
 8000da2:	e00c      	b.n	8000dbe <MFRC522_SelectTag+0x30>
    {
    	buffer[i+2] = *(serNum+i);
 8000da4:	7ffb      	ldrb	r3, [r7, #31]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	441a      	add	r2, r3
 8000daa:	7ffb      	ldrb	r3, [r7, #31]
 8000dac:	3302      	adds	r3, #2
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	3320      	adds	r3, #32
 8000db2:	443b      	add	r3, r7
 8000db4:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<5; i++)
 8000db8:	7ffb      	ldrb	r3, [r7, #31]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	77fb      	strb	r3, [r7, #31]
 8000dbe:	7ffb      	ldrb	r3, [r7, #31]
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	d9ef      	bls.n	8000da4 <MFRC522_SelectTag+0x16>
    }
	CalulateCRC(buffer, 7, &buffer[7]);		//??
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	1dda      	adds	r2, r3, #7
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	2107      	movs	r1, #7
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff93 	bl	8000cfc <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8000dd6:	f107 020c 	add.w	r2, r7, #12
 8000dda:	f107 010c 	add.w	r1, r7, #12
 8000dde:	f107 0318 	add.w	r3, r7, #24
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	4613      	mov	r3, r2
 8000de6:	2209      	movs	r2, #9
 8000de8:	200c      	movs	r0, #12
 8000dea:	f7ff fe5c 	bl	8000aa6 <MFRC522_ToCard>
 8000dee:	4603      	mov	r3, r0
 8000df0:	777b      	strb	r3, [r7, #29]
    
    if ((status == MI_OK) && (recvBits == 0x18))
 8000df2:	7f7b      	ldrb	r3, [r7, #29]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d105      	bne.n	8000e04 <MFRC522_SelectTag+0x76>
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	2b18      	cmp	r3, #24
 8000dfc:	d102      	bne.n	8000e04 <MFRC522_SelectTag+0x76>
    {   
		size = buffer[0]; 
 8000dfe:	7b3b      	ldrb	r3, [r7, #12]
 8000e00:	77bb      	strb	r3, [r7, #30]
 8000e02:	e001      	b.n	8000e08 <MFRC522_SelectTag+0x7a>
	}
    else
    {   
		size = 0;    
 8000e04:	2300      	movs	r3, #0
 8000e06:	77bb      	strb	r3, [r7, #30]
	}

    return size;
 8000e08:	7fbb      	ldrb	r3, [r7, #30]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <MFRC522_Auth>:
             Sectorkey - The shadow area
             serNum - So serial the, 4 bytes
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t *Sectorkey, uint8_t *serNum)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b08c      	sub	sp, #48	; 0x30
 8000e16:	af02      	add	r7, sp, #8
 8000e18:	60ba      	str	r2, [r7, #8]
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	460b      	mov	r3, r1
 8000e22:	73bb      	strb	r3, [r7, #14]
    uint recvBits;
    uint8_t i;
	uint8_t buff[12]; 

	//Confirmation + Address + password + quick number
    buff[0] = authMode;
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	753b      	strb	r3, [r7, #20]
    buff[1] = BlockAddr;
 8000e28:	7bbb      	ldrb	r3, [r7, #14]
 8000e2a:	757b      	strb	r3, [r7, #21]
    for (i=0; i<6; i++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e32:	e010      	b.n	8000e56 <MFRC522_Auth+0x44>
    {    
		buff[i+2] = *(Sectorkey+i);   
 8000e34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e38:	68ba      	ldr	r2, [r7, #8]
 8000e3a:	441a      	add	r2, r3
 8000e3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e40:	3302      	adds	r3, #2
 8000e42:	7812      	ldrb	r2, [r2, #0]
 8000e44:	3328      	adds	r3, #40	; 0x28
 8000e46:	443b      	add	r3, r7
 8000e48:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<6; i++)
 8000e4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e50:	3301      	adds	r3, #1
 8000e52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e5a:	2b05      	cmp	r3, #5
 8000e5c:	d9ea      	bls.n	8000e34 <MFRC522_Auth+0x22>
	}
    for (i=0; i<4; i++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e64:	e010      	b.n	8000e88 <MFRC522_Auth+0x76>
    {    
		buff[i+8] = *(serNum+i);   
 8000e66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	441a      	add	r2, r3
 8000e6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e72:	3308      	adds	r3, #8
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	3328      	adds	r3, #40	; 0x28
 8000e78:	443b      	add	r3, r7
 8000e7a:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<4; i++)
 8000e7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e82:	3301      	adds	r3, #1
 8000e84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d9ea      	bls.n	8000e66 <MFRC522_Auth+0x54>
	}
    status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 8000e90:	f107 0214 	add.w	r2, r7, #20
 8000e94:	f107 0114 	add.w	r1, r7, #20
 8000e98:	f107 0320 	add.w	r3, r7, #32
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	220c      	movs	r2, #12
 8000ea2:	200e      	movs	r0, #14
 8000ea4:	f7ff fdff 	bl	8000aa6 <MFRC522_ToCard>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08)))
 8000eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d107      	bne.n	8000ec6 <MFRC522_Auth+0xb4>
 8000eb6:	2008      	movs	r0, #8
 8000eb8:	f7ff fd90 	bl	80009dc <Read_MFRC522>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d102      	bne.n	8000ecc <MFRC522_Auth+0xba>
    {   
		status = MI_ERR;   
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
    
    return status;
 8000ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3728      	adds	r7, #40	; 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <MFRC522_Read>:
 * Doc with data
 * Input: blockAddr - Address location; recvData - Retrieve document output
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Read(uint8_t blockAddr, uint8_t *recvData)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    uint unLen;

    recvData[0] = PICC_READ;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	2230      	movs	r2, #48	; 0x30
 8000ee8:	701a      	strb	r2, [r3, #0]
    recvData[1] = blockAddr;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	79fa      	ldrb	r2, [r7, #7]
 8000ef0:	701a      	strb	r2, [r3, #0]
    CalulateCRC(recvData,2, &recvData[2]);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	2102      	movs	r1, #2
 8000efa:	6838      	ldr	r0, [r7, #0]
 8000efc:	f7ff fefe 	bl	8000cfc <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2204      	movs	r2, #4
 8000f0a:	6839      	ldr	r1, [r7, #0]
 8000f0c:	200c      	movs	r0, #12
 8000f0e:	f7ff fdca 	bl	8000aa6 <MFRC522_ToCard>
 8000f12:	4603      	mov	r3, r0
 8000f14:	73fb      	strb	r3, [r7, #15]

    if ((status != MI_OK) || (unLen != 0x90))
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <MFRC522_Read+0x4a>
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	2b90      	cmp	r3, #144	; 0x90
 8000f20:	d001      	beq.n	8000f26 <MFRC522_Read+0x4e>
    {
        status = MI_ERR;
 8000f22:	2302      	movs	r3, #2
 8000f24:	73fb      	strb	r3, [r7, #15]
    }
    
    return status;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <MFRC522_Write>:
 * wait repeats data
 * Input: blockAddr - locations; writeData - write data
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Write(uint8_t blockAddr, uint8_t *writeData)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	; 0x30
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    uint recvBits;
    uint8_t i;
	uint8_t buff[18]; 
    
    buff[0] = PICC_WRITE;
 8000f3c:	23a0      	movs	r3, #160	; 0xa0
 8000f3e:	733b      	strb	r3, [r7, #12]
    buff[1] = blockAddr;
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	737b      	strb	r3, [r7, #13]
    CalulateCRC(buff, 2, &buff[2]);
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	1c9a      	adds	r2, r3, #2
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	2102      	movs	r1, #2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fed3 	bl	8000cfc <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);
 8000f56:	f107 020c 	add.w	r2, r7, #12
 8000f5a:	f107 010c 	add.w	r1, r7, #12
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	4613      	mov	r3, r2
 8000f66:	2204      	movs	r2, #4
 8000f68:	200c      	movs	r0, #12
 8000f6a:	f7ff fd9c 	bl	8000aa6 <MFRC522_ToCard>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
 8000f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d107      	bne.n	8000f8c <MFRC522_Write+0x5c>
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d104      	bne.n	8000f8c <MFRC522_Write+0x5c>
 8000f82:	7b3b      	ldrb	r3, [r7, #12]
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	2b0a      	cmp	r3, #10
 8000f8a:	d002      	beq.n	8000f92 <MFRC522_Write+0x62>
    {   
		status = MI_ERR;   
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
        
    if (status == MI_OK)
 8000f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d13f      	bne.n	800101a <MFRC522_Write+0xea>
    {
        for (i=0; i<16; i++)		//16 FIFO bytes recorded
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000fa0:	e00f      	b.n	8000fc2 <MFRC522_Write+0x92>
        {    
        	buff[i] = *(writeData+i);   
 8000fa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	441a      	add	r2, r3
 8000faa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fae:	7812      	ldrb	r2, [r2, #0]
 8000fb0:	3328      	adds	r3, #40	; 0x28
 8000fb2:	443b      	add	r3, r7
 8000fb4:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i=0; i<16; i++)		//16 FIFO bytes recorded
 8000fb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000fc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fc6:	2b0f      	cmp	r3, #15
 8000fc8:	d9eb      	bls.n	8000fa2 <MFRC522_Write+0x72>
        }
        CalulateCRC(buff, 16, &buff[16]);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	f103 0210 	add.w	r2, r3, #16
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fe8f 	bl	8000cfc <CalulateCRC>
        status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
 8000fde:	f107 020c 	add.w	r2, r7, #12
 8000fe2:	f107 010c 	add.w	r1, r7, #12
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	4613      	mov	r3, r2
 8000fee:	2212      	movs	r2, #18
 8000ff0:	200c      	movs	r0, #12
 8000ff2:	f7ff fd58 	bl	8000aa6 <MFRC522_ToCard>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
 8000ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001000:	2b00      	cmp	r3, #0
 8001002:	d107      	bne.n	8001014 <MFRC522_Write+0xe4>
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	2b04      	cmp	r3, #4
 8001008:	d104      	bne.n	8001014 <MFRC522_Write+0xe4>
 800100a:	7b3b      	ldrb	r3, [r7, #12]
 800100c:	f003 030f 	and.w	r3, r3, #15
 8001010:	2b0a      	cmp	r3, #10
 8001012:	d002      	beq.n	800101a <MFRC522_Write+0xea>
        {   
			status = MI_ERR;   
 8001014:	2302      	movs	r3, #2
 8001016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
    }
    
    return status;
 800101a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800101e:	4618      	mov	r0, r3
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <HAL_MspInit+0x44>)
 8001030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001032:	4a0e      	ldr	r2, [pc, #56]	; (800106c <HAL_MspInit+0x44>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6613      	str	r3, [r2, #96]	; 0x60
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HAL_MspInit+0x44>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_MspInit+0x44>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_MspInit+0x44>)
 800104c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001050:	6593      	str	r3, [r2, #88]	; 0x58
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_MspInit+0x44>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000

08001070 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0ac      	sub	sp, #176	; 0xb0
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2288      	movs	r2, #136	; 0x88
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f005 f907 	bl	80062a4 <memset>
  if(hadc->Instance==ADC1)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a3d      	ldr	r2, [pc, #244]	; (8001190 <HAL_ADC_MspInit+0x120>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d173      	bne.n	8001188 <HAL_ADC_MspInit+0x118>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010a4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010ae:	2302      	movs	r3, #2
 80010b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80010b6:	2308      	movs	r3, #8
 80010b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010ba:	2307      	movs	r3, #7
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4618      	mov	r0, r3
 80010d2:	f002 ff1b 	bl	8003f0c <HAL_RCCEx_PeriphCLKConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80010dc:	f7ff fc3a 	bl	8000954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010e0:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <HAL_ADC_MspInit+0x124>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	4a2b      	ldr	r2, [pc, #172]	; (8001194 <HAL_ADC_MspInit+0x124>)
 80010e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ec:	4b29      	ldr	r3, [pc, #164]	; (8001194 <HAL_ADC_MspInit+0x124>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_ADC_MspInit+0x124>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	4a25      	ldr	r2, [pc, #148]	; (8001194 <HAL_ADC_MspInit+0x124>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <HAL_ADC_MspInit+0x124>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001110:	2312      	movs	r3, #18
 8001112:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001116:	230b      	movs	r3, #11
 8001118:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f001 fed0 	bl	8002ed0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_ADC_MspInit+0x128>)
 8001132:	4a1a      	ldr	r2, [pc, #104]	; (800119c <HAL_ADC_MspInit+0x12c>)
 8001134:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_ADC_MspInit+0x128>)
 8001138:	2200      	movs	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_ADC_MspInit+0x128>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_ADC_MspInit+0x128>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_ADC_MspInit+0x128>)
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_ADC_MspInit+0x128>)
 8001150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001154:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_ADC_MspInit+0x128>)
 8001158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800115c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_ADC_MspInit+0x128>)
 8001160:	2220      	movs	r2, #32
 8001162:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <HAL_ADC_MspInit+0x128>)
 8001166:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800116a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <HAL_ADC_MspInit+0x128>)
 800116e:	f001 fcb7 	bl	8002ae0 <HAL_DMA_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_ADC_MspInit+0x10c>
    {
      Error_Handler();
 8001178:	f7ff fbec 	bl	8000954 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_ADC_MspInit+0x128>)
 8001180:	64da      	str	r2, [r3, #76]	; 0x4c
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <HAL_ADC_MspInit+0x128>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	37b0      	adds	r7, #176	; 0xb0
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	50040000 	.word	0x50040000
 8001194:	40021000 	.word	0x40021000
 8001198:	200000a0 	.word	0x200000a0
 800119c:	40020008 	.word	0x40020008

080011a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_SPI_MspInit+0x7c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d128      	bne.n	8001214 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <HAL_SPI_MspInit+0x80>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c6:	4a16      	ldr	r2, [pc, #88]	; (8001220 <HAL_SPI_MspInit+0x80>)
 80011c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011cc:	6613      	str	r3, [r2, #96]	; 0x60
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_SPI_MspInit+0x80>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_SPI_MspInit+0x80>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a10      	ldr	r2, [pc, #64]	; (8001220 <HAL_SPI_MspInit+0x80>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_SPI_MspInit+0x80>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011f2:	23e0      	movs	r3, #224	; 0xe0
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001202:	2305      	movs	r3, #5
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001210:	f001 fe5e 	bl	8002ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40013000 	.word	0x40013000
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_TIM_Base_MspInit+0x38>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d10b      	bne.n	800124e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_TIM_Base_MspInit+0x3c>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123a:	4a09      	ldr	r2, [pc, #36]	; (8001260 <HAL_TIM_Base_MspInit+0x3c>)
 800123c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001240:	6613      	str	r3, [r2, #96]	; 0x60
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <HAL_TIM_Base_MspInit+0x3c>)
 8001244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40012c00 	.word	0x40012c00
 8001260:	40021000 	.word	0x40021000

08001264 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <HAL_TIM_MspPostInit+0x68>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d11d      	bne.n	80012c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_TIM_MspPostInit+0x6c>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <HAL_TIM_MspPostInit+0x6c>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_TIM_MspPostInit+0x6c>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800129e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f001 fe07 	bl	8002ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012c2:	bf00      	nop
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40012c00 	.word	0x40012c00
 80012d0:	40021000 	.word	0x40021000

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <NMI_Handler+0x4>

080012da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <MemManage_Handler+0x4>

080012e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001320:	f000 f8ac 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <DMA1_Channel1_IRQHandler+0x10>)
 800132e:	f001 fcef 	bl	8002d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200000a0 	.word	0x200000a0

0800133c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001340:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001344:	f001 ff9e 	bl	8003284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <SystemInit+0x20>)
 8001352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <SystemInit+0x20>)
 8001358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800135c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001374:	f7ff ffea 	bl	800134c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <LoopForever+0x6>)
  ldr r1, =_edata
 800137a:	490d      	ldr	r1, [pc, #52]	; (80013b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <LoopForever+0xe>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001390:	4c0a      	ldr	r4, [pc, #40]	; (80013bc <LoopForever+0x16>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139e:	f004 ff5d 	bl	800625c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013a2:	f7fe ff49 	bl	8000238 <main>

080013a6 <LoopForever>:

LoopForever:
    b LoopForever
 80013a6:	e7fe      	b.n	80013a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80013b4:	08006314 	.word	0x08006314
  ldr r2, =_sbss
 80013b8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80013bc:	200001dc 	.word	0x200001dc

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_Init+0x3c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <HAL_Init+0x3c>)
 80013d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013da:	2003      	movs	r0, #3
 80013dc:	f001 fb3e 	bl	8002a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 f80f 	bl	8001404 <HAL_InitTick>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	e001      	b.n	80013f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013f2:	f7ff fe19 	bl	8001028 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013f6:	79fb      	ldrb	r3, [r7, #7]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40022000 	.word	0x40022000

08001404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_InitTick+0x6c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d023      	beq.n	8001460 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_InitTick+0x70>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <HAL_InitTick+0x6c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f001 fb49 	bl	8002ac6 <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10f      	bne.n	800145a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d809      	bhi.n	8001454 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f001 fb13 	bl	8002a72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_InitTick+0x74>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e007      	b.n	8001464 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	e004      	b.n	8001464 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e001      	b.n	8001464 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001464:	7bfb      	ldrb	r3, [r7, #15]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000001c 	.word	0x2000001c
 8001474:	20000014 	.word	0x20000014
 8001478:	20000018 	.word	0x20000018

0800147c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x20>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x24>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_IncTick+0x24>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	2000001c 	.word	0x2000001c
 80014a0:	200001d8 	.word	0x200001d8

080014a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_GetTick+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	200001d8 	.word	0x200001d8

080014bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff ffee 	bl	80014a4 <HAL_GetTick>
 80014c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d4:	d005      	beq.n	80014e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_Delay+0x44>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e2:	bf00      	nop
 80014e4:	f7ff ffde 	bl	80014a4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d8f7      	bhi.n	80014e4 <HAL_Delay+0x28>
  {
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000001c 	.word	0x2000001c

08001504 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	609a      	str	r2, [r3, #8]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	609a      	str	r2, [r3, #8]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	3360      	adds	r3, #96	; 0x60
 800157e:	461a      	mov	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <LL_ADC_SetOffset+0x44>)
 800158e:	4013      	ands	r3, r2
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	4313      	orrs	r3, r2
 800159c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015a4:	bf00      	nop
 80015a6:	371c      	adds	r7, #28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	03fff000 	.word	0x03fff000

080015b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3360      	adds	r3, #96	; 0x60
 80015c2:	461a      	mov	r2, r3
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3360      	adds	r3, #96	; 0x60
 80015f0:	461a      	mov	r2, r3
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	431a      	orrs	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800160a:	bf00      	nop
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3330      	adds	r3, #48	; 0x30
 800164c:	461a      	mov	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	4413      	add	r3, r2
 800165a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	211f      	movs	r1, #31
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	401a      	ands	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	0e9b      	lsrs	r3, r3, #26
 8001674:	f003 011f 	and.w	r1, r3, #31
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	431a      	orrs	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001688:	bf00      	nop
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3314      	adds	r3, #20
 80016a4:	461a      	mov	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	0e5b      	lsrs	r3, r3, #25
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	4413      	add	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	0d1b      	lsrs	r3, r3, #20
 80016bc:	f003 031f 	and.w	r3, r3, #31
 80016c0:	2107      	movs	r1, #7
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	401a      	ands	r2, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	0d1b      	lsrs	r3, r3, #20
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	431a      	orrs	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016de:	bf00      	nop
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001704:	43db      	mvns	r3, r3
 8001706:	401a      	ands	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0318 	and.w	r3, r3, #24
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001710:	40d9      	lsrs	r1, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	400b      	ands	r3, r1
 8001716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800171a:	431a      	orrs	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	0007ffff 	.word	0x0007ffff

08001734 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 031f 	and.w	r3, r3, #31
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6093      	str	r3, [r2, #8]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001788:	d101      	bne.n	800178e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017d8:	d101      	bne.n	80017de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <LL_ADC_IsEnabled+0x18>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <LL_ADC_IsEnabled+0x1a>
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800184a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800184e:	f043 0204 	orr.w	r2, r3, #4
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	2b04      	cmp	r3, #4
 8001874:	d101      	bne.n	800187a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b08      	cmp	r3, #8
 800189a:	d101      	bne.n	80018a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e136      	b.n	8001b38 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff fbc9 	bl	8001070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff3f 	bl	8001774 <LL_ADC_IsDeepPowerDownEnabled>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff25 	bl	8001750 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ff5a 	bl	80017c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d115      	bne.n	8001942 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff3e 	bl	800179c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001920:	4b87      	ldr	r3, [pc, #540]	; (8001b40 <HAL_ADC_Init+0x290>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	099b      	lsrs	r3, r3, #6
 8001926:	4a87      	ldr	r2, [pc, #540]	; (8001b44 <HAL_ADC_Init+0x294>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	099b      	lsrs	r3, r3, #6
 800192e:	3301      	adds	r3, #1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001934:	e002      	b.n	800193c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	3b01      	subs	r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f9      	bne.n	8001936 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ff3c 	bl	80017c4 <LL_ADC_IsInternalRegulatorEnabled>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10d      	bne.n	800196e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001956:	f043 0210 	orr.w	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff75 	bl	8001862 <LL_ADC_REG_IsConversionOngoing>
 8001978:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b00      	cmp	r3, #0
 8001984:	f040 80cf 	bne.w	8001b26 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 80cb 	bne.w	8001b26 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001994:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001998:	f043 0202 	orr.w	r2, r3, #2
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff35 	bl	8001814 <LL_ADC_IsEnabled>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d115      	bne.n	80019dc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019b0:	4865      	ldr	r0, [pc, #404]	; (8001b48 <HAL_ADC_Init+0x298>)
 80019b2:	f7ff ff2f 	bl	8001814 <LL_ADC_IsEnabled>
 80019b6:	4604      	mov	r4, r0
 80019b8:	4864      	ldr	r0, [pc, #400]	; (8001b4c <HAL_ADC_Init+0x29c>)
 80019ba:	f7ff ff2b 	bl	8001814 <LL_ADC_IsEnabled>
 80019be:	4603      	mov	r3, r0
 80019c0:	431c      	orrs	r4, r3
 80019c2:	4863      	ldr	r0, [pc, #396]	; (8001b50 <HAL_ADC_Init+0x2a0>)
 80019c4:	f7ff ff26 	bl	8001814 <LL_ADC_IsEnabled>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4323      	orrs	r3, r4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4619      	mov	r1, r3
 80019d6:	485f      	ldr	r0, [pc, #380]	; (8001b54 <HAL_ADC_Init+0x2a4>)
 80019d8:	f7ff fd94 	bl	8001504 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7e5b      	ldrb	r3, [r3, #25]
 80019e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019e6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80019ec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80019f2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019fa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d106      	bne.n	8001a18 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	045b      	lsls	r3, r3, #17
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d009      	beq.n	8001a34 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <HAL_ADC_Init+0x2a8>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	69b9      	ldr	r1, [r7, #24]
 8001a44:	430b      	orrs	r3, r1
 8001a46:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff08 	bl	8001862 <LL_ADC_REG_IsConversionOngoing>
 8001a52:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff15 	bl	8001888 <LL_ADC_INJ_IsConversionOngoing>
 8001a5e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d13d      	bne.n	8001ae2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d13a      	bne.n	8001ae2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a70:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a78:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a88:	f023 0302 	bic.w	r3, r3, #2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	69b9      	ldr	r1, [r7, #24]
 8001a92:	430b      	orrs	r3, r1
 8001a94:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d118      	bne.n	8001ad2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001aaa:	f023 0304 	bic.w	r3, r3, #4
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ab6:	4311      	orrs	r1, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001abc:	4311      	orrs	r1, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	611a      	str	r2, [r3, #16]
 8001ad0:	e007      	b.n	8001ae2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0201 	bic.w	r2, r2, #1
 8001ae0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d10c      	bne.n	8001b04 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	f023 010f 	bic.w	r1, r3, #15
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	1e5a      	subs	r2, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	631a      	str	r2, [r3, #48]	; 0x30
 8001b02:	e007      	b.n	8001b14 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 020f 	bic.w	r2, r2, #15
 8001b12:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b18:	f023 0303 	bic.w	r3, r3, #3
 8001b1c:	f043 0201 	orr.w	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
 8001b24:	e007      	b.n	8001b36 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2a:	f043 0210 	orr.w	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b36:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3724      	adds	r7, #36	; 0x24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd90      	pop	{r4, r7, pc}
 8001b40:	20000014 	.word	0x20000014
 8001b44:	053e2d63 	.word	0x053e2d63
 8001b48:	50040000 	.word	0x50040000
 8001b4c:	50040100 	.word	0x50040100
 8001b50:	50040200 	.word	0x50040200
 8001b54:	50040300 	.word	0x50040300
 8001b58:	fff0c007 	.word	0xfff0c007

08001b5c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b68:	4853      	ldr	r0, [pc, #332]	; (8001cb8 <HAL_ADC_Start_DMA+0x15c>)
 8001b6a:	f7ff fde3 	bl	8001734 <LL_ADC_GetMultimode>
 8001b6e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fe74 	bl	8001862 <LL_ADC_REG_IsConversionOngoing>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f040 8093 	bne.w	8001ca8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_ADC_Start_DMA+0x34>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e08e      	b.n	8001cae <HAL_ADC_Start_DMA+0x152>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a47      	ldr	r2, [pc, #284]	; (8001cbc <HAL_ADC_Start_DMA+0x160>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d008      	beq.n	8001bb4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d002      	beq.n	8001bb4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2b09      	cmp	r3, #9
 8001bb2:	d172      	bne.n	8001c9a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fc91 	bl	80024dc <ADC_Enable>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d165      	bne.n	8001c90 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a38      	ldr	r2, [pc, #224]	; (8001cc0 <HAL_ADC_Start_DMA+0x164>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d002      	beq.n	8001be8 <HAL_ADC_Start_DMA+0x8c>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	e000      	b.n	8001bea <HAL_ADC_Start_DMA+0x8e>
 8001be8:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_ADC_Start_DMA+0x168>)
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d002      	beq.n	8001bf8 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c14:	f023 0206 	bic.w	r2, r3, #6
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c1c:	e002      	b.n	8001c24 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	4a27      	ldr	r2, [pc, #156]	; (8001cc8 <HAL_ADC_Start_DMA+0x16c>)
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c30:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <HAL_ADC_Start_DMA+0x170>)
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c38:	4a25      	ldr	r2, [pc, #148]	; (8001cd0 <HAL_ADC_Start_DMA+0x174>)
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	221c      	movs	r2, #28
 8001c42:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0210 	orr.w	r2, r2, #16
 8001c5a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3340      	adds	r3, #64	; 0x40
 8001c76:	4619      	mov	r1, r3
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f000 ffe8 	bl	8002c50 <HAL_DMA_Start_IT>
 8001c80:	4603      	mov	r3, r0
 8001c82:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fdd6 	bl	800183a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001c8e:	e00d      	b.n	8001cac <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001c98:	e008      	b.n	8001cac <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001ca6:	e001      	b.n	8001cac <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	50040300 	.word	0x50040300
 8001cbc:	50040200 	.word	0x50040200
 8001cc0:	50040100 	.word	0x50040100
 8001cc4:	50040000 	.word	0x50040000
 8001cc8:	080025e9 	.word	0x080025e9
 8001ccc:	080026c1 	.word	0x080026c1
 8001cd0:	080026dd 	.word	0x080026dd

08001cd4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b0b6      	sub	sp, #216	; 0xd8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x22>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e3c7      	b.n	80024ae <HAL_ADC_ConfigChannel+0x7b2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fd99 	bl	8001862 <LL_ADC_REG_IsConversionOngoing>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 83a8 	bne.w	8002488 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d824      	bhi.n	8001d8a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	3b02      	subs	r3, #2
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d81b      	bhi.n	8001d82 <HAL_ADC_ConfigChannel+0x86>
 8001d4a:	a201      	add	r2, pc, #4	; (adr r2, 8001d50 <HAL_ADC_ConfigChannel+0x54>)
 8001d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d50:	08001d61 	.word	0x08001d61
 8001d54:	08001d69 	.word	0x08001d69
 8001d58:	08001d71 	.word	0x08001d71
 8001d5c:	08001d79 	.word	0x08001d79
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	220c      	movs	r2, #12
 8001d64:	605a      	str	r2, [r3, #4]
          break;
 8001d66:	e011      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	2212      	movs	r2, #18
 8001d6c:	605a      	str	r2, [r3, #4]
          break;
 8001d6e:	e00d      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2218      	movs	r2, #24
 8001d74:	605a      	str	r2, [r3, #4]
          break;
 8001d76:	e009      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d7e:	605a      	str	r2, [r3, #4]
          break;
 8001d80:	e004      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2206      	movs	r2, #6
 8001d86:	605a      	str	r2, [r3, #4]
          break;
 8001d88:	e000      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d8a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	f7ff fc4f 	bl	800163c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fd5d 	bl	8001862 <LL_ADC_REG_IsConversionOngoing>
 8001da8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fd69 	bl	8001888 <LL_ADC_INJ_IsConversionOngoing>
 8001db6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f040 81a6 	bne.w	8002110 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f040 81a1 	bne.w	8002110 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6819      	ldr	r1, [r3, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f7ff fc5a 	bl	8001694 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	695a      	ldr	r2, [r3, #20]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	08db      	lsrs	r3, r3, #3
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d00a      	beq.n	8001e18 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6919      	ldr	r1, [r3, #16]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e12:	f7ff fbab 	bl	800156c <LL_ADC_SetOffset>
 8001e16:	e17b      	b.n	8002110 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fbc8 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10a      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x148>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fbbd 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	0e9b      	lsrs	r3, r3, #26
 8001e3e:	f003 021f 	and.w	r2, r3, #31
 8001e42:	e01e      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x186>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fbb2 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001e72:	2320      	movs	r3, #32
 8001e74:	e004      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001e76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x19e>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0e9b      	lsrs	r3, r3, #26
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	e018      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x1d0>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001eb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	e004      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001ec2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d106      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fb81 	bl	80015e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fb65 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10a      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x20e>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fb5a 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	0e9b      	lsrs	r3, r3, #26
 8001f04:	f003 021f 	and.w	r2, r3, #31
 8001f08:	e01e      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x24c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2101      	movs	r1, #1
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fb4f 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001f38:	2320      	movs	r3, #32
 8001f3a:	e004      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001f3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d105      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x264>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	e018      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x296>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001f84:	2320      	movs	r3, #32
 8001f86:	e004      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d106      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fb1e 	bl	80015e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2102      	movs	r1, #2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fb02 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x2d4>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2102      	movs	r1, #2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff faf7 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	0e9b      	lsrs	r3, r3, #26
 8001fca:	f003 021f 	and.w	r2, r3, #31
 8001fce:	e01e      	b.n	800200e <HAL_ADC_ConfigChannel+0x312>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff faec 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001ff6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001ffe:	2320      	movs	r3, #32
 8002000:	e004      	b.n	800200c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002002:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x32a>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0e9b      	lsrs	r3, r3, #26
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	e016      	b.n	8002054 <HAL_ADC_ConfigChannel+0x358>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002038:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800203a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800203e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002046:	2320      	movs	r3, #32
 8002048:	e004      	b.n	8002054 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800204a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002054:	429a      	cmp	r2, r3
 8002056:	d106      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	2102      	movs	r1, #2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fabd 	bl	80015e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2103      	movs	r1, #3
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff faa1 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10a      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x396>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2103      	movs	r1, #3
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fa96 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8002088:	4603      	mov	r3, r0
 800208a:	0e9b      	lsrs	r3, r3, #26
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	e017      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x3c6>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2103      	movs	r1, #3
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fa8b 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 800209e:	4603      	mov	r3, r0
 80020a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80020aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80020ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80020b4:	2320      	movs	r3, #32
 80020b6:	e003      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80020b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d105      	bne.n	80020da <HAL_ADC_ConfigChannel+0x3de>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	0e9b      	lsrs	r3, r3, #26
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	e011      	b.n	80020fe <HAL_ADC_ConfigChannel+0x402>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80020e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80020ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80020f2:	2320      	movs	r3, #32
 80020f4:	e003      	b.n	80020fe <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80020f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020fe:	429a      	cmp	r2, r3
 8002100:	d106      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2200      	movs	r2, #0
 8002108:	2103      	movs	r1, #3
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fa68 	bl	80015e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fb7d 	bl	8001814 <LL_ADC_IsEnabled>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	f040 813f 	bne.w	80023a0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	6819      	ldr	r1, [r3, #0]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	461a      	mov	r2, r3
 8002130:	f7ff fadc 	bl	80016ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4a8e      	ldr	r2, [pc, #568]	; (8002374 <HAL_ADC_ConfigChannel+0x678>)
 800213a:	4293      	cmp	r3, r2
 800213c:	f040 8130 	bne.w	80023a0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10b      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x46c>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	3301      	adds	r3, #1
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	2b09      	cmp	r3, #9
 800215e:	bf94      	ite	ls
 8002160:	2301      	movls	r3, #1
 8002162:	2300      	movhi	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	e019      	b.n	800219c <HAL_ADC_ConfigChannel+0x4a0>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002176:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002178:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800217a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002180:	2320      	movs	r3, #32
 8002182:	e003      	b.n	800218c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002184:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	3301      	adds	r3, #1
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	2b09      	cmp	r3, #9
 8002194:	bf94      	ite	ls
 8002196:	2301      	movls	r3, #1
 8002198:	2300      	movhi	r3, #0
 800219a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800219c:	2b00      	cmp	r3, #0
 800219e:	d079      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d107      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x4c0>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0e9b      	lsrs	r3, r3, #26
 80021b2:	3301      	adds	r3, #1
 80021b4:	069b      	lsls	r3, r3, #26
 80021b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ba:	e015      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x4ec>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c4:	fa93 f3a3 	rbit	r3, r3
 80021c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80021ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80021d4:	2320      	movs	r3, #32
 80021d6:	e003      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80021d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	069b      	lsls	r3, r3, #26
 80021e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d109      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x50c>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0e9b      	lsrs	r3, r3, #26
 80021fa:	3301      	adds	r3, #1
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	2101      	movs	r1, #1
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	e017      	b.n	8002238 <HAL_ADC_ConfigChannel+0x53c>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002218:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800221a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002220:	2320      	movs	r3, #32
 8002222:	e003      	b.n	800222c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	2101      	movs	r1, #1
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	ea42 0103 	orr.w	r1, r2, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10a      	bne.n	800225e <HAL_ADC_ConfigChannel+0x562>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	0e9b      	lsrs	r3, r3, #26
 800224e:	3301      	adds	r3, #1
 8002250:	f003 021f 	and.w	r2, r3, #31
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	051b      	lsls	r3, r3, #20
 800225c:	e018      	b.n	8002290 <HAL_ADC_ConfigChannel+0x594>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800226c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002276:	2320      	movs	r3, #32
 8002278:	e003      	b.n	8002282 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800227a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	3301      	adds	r3, #1
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002290:	430b      	orrs	r3, r1
 8002292:	e080      	b.n	8002396 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229c:	2b00      	cmp	r3, #0
 800229e:	d107      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x5b4>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0e9b      	lsrs	r3, r3, #26
 80022a6:	3301      	adds	r3, #1
 80022a8:	069b      	lsls	r3, r3, #26
 80022aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ae:	e015      	b.n	80022dc <HAL_ADC_ConfigChannel+0x5e0>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80022be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80022c8:	2320      	movs	r3, #32
 80022ca:	e003      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80022cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	3301      	adds	r3, #1
 80022d6:	069b      	lsls	r3, r3, #26
 80022d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d109      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x600>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0e9b      	lsrs	r3, r3, #26
 80022ee:	3301      	adds	r3, #1
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	2101      	movs	r1, #1
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	e017      	b.n	800232c <HAL_ADC_ConfigChannel+0x630>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	61fb      	str	r3, [r7, #28]
  return result;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002314:	2320      	movs	r3, #32
 8002316:	e003      	b.n	8002320 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	fab3 f383 	clz	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	3301      	adds	r3, #1
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	2101      	movs	r1, #1
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	ea42 0103 	orr.w	r1, r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10d      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x65c>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	3301      	adds	r3, #1
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	3b1e      	subs	r3, #30
 8002350:	051b      	lsls	r3, r3, #20
 8002352:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002356:	e01d      	b.n	8002394 <HAL_ADC_ConfigChannel+0x698>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	613b      	str	r3, [r7, #16]
  return result;
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d103      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002370:	2320      	movs	r3, #32
 8002372:	e005      	b.n	8002380 <HAL_ADC_ConfigChannel+0x684>
 8002374:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	3301      	adds	r3, #1
 8002382:	f003 021f 	and.w	r2, r3, #31
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	3b1e      	subs	r3, #30
 800238e:	051b      	lsls	r3, r3, #20
 8002390:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002394:	430b      	orrs	r3, r1
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	6892      	ldr	r2, [r2, #8]
 800239a:	4619      	mov	r1, r3
 800239c:	f7ff f97a 	bl	8001694 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b44      	ldr	r3, [pc, #272]	; (80024b8 <HAL_ADC_ConfigChannel+0x7bc>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d07a      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023ac:	4843      	ldr	r0, [pc, #268]	; (80024bc <HAL_ADC_ConfigChannel+0x7c0>)
 80023ae:	f7ff f8cf 	bl	8001550 <LL_ADC_GetCommonPathInternalCh>
 80023b2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a41      	ldr	r2, [pc, #260]	; (80024c0 <HAL_ADC_ConfigChannel+0x7c4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d12c      	bne.n	800241a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d126      	bne.n	800241a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a3c      	ldr	r2, [pc, #240]	; (80024c4 <HAL_ADC_ConfigChannel+0x7c8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_ADC_ConfigChannel+0x6e4>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a3b      	ldr	r2, [pc, #236]	; (80024c8 <HAL_ADC_ConfigChannel+0x7cc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d15d      	bne.n	800249c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023e8:	4619      	mov	r1, r3
 80023ea:	4834      	ldr	r0, [pc, #208]	; (80024bc <HAL_ADC_ConfigChannel+0x7c0>)
 80023ec:	f7ff f89d 	bl	800152a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023f0:	4b36      	ldr	r3, [pc, #216]	; (80024cc <HAL_ADC_ConfigChannel+0x7d0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	099b      	lsrs	r3, r3, #6
 80023f6:	4a36      	ldr	r2, [pc, #216]	; (80024d0 <HAL_ADC_ConfigChannel+0x7d4>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	099b      	lsrs	r3, r3, #6
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800240a:	e002      	b.n	8002412 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3b01      	subs	r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f9      	bne.n	800240c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002418:	e040      	b.n	800249c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d118      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x75a>
 8002424:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d112      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a23      	ldr	r2, [pc, #140]	; (80024c4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d004      	beq.n	8002444 <HAL_ADC_ConfigChannel+0x748>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a22      	ldr	r2, [pc, #136]	; (80024c8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d12d      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002444:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002448:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244c:	4619      	mov	r1, r3
 800244e:	481b      	ldr	r0, [pc, #108]	; (80024bc <HAL_ADC_ConfigChannel+0x7c0>)
 8002450:	f7ff f86b 	bl	800152a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002454:	e024      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1f      	ldr	r2, [pc, #124]	; (80024d8 <HAL_ADC_ConfigChannel+0x7dc>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d120      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002460:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d11a      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a14      	ldr	r2, [pc, #80]	; (80024c4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d115      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002476:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800247a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800247e:	4619      	mov	r1, r3
 8002480:	480e      	ldr	r0, [pc, #56]	; (80024bc <HAL_ADC_ConfigChannel+0x7c0>)
 8002482:	f7ff f852 	bl	800152a <LL_ADC_SetCommonPathInternalCh>
 8002486:	e00c      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800249a:	e002      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800249c:	bf00      	nop
 800249e:	e000      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	37d8      	adds	r7, #216	; 0xd8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	80080000 	.word	0x80080000
 80024bc:	50040300 	.word	0x50040300
 80024c0:	c7520000 	.word	0xc7520000
 80024c4:	50040000 	.word	0x50040000
 80024c8:	50040200 	.word	0x50040200
 80024cc:	20000014 	.word	0x20000014
 80024d0:	053e2d63 	.word	0x053e2d63
 80024d4:	cb840000 	.word	0xcb840000
 80024d8:	80000001 	.word	0x80000001

080024dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff f991 	bl	8001814 <LL_ADC_IsEnabled>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d169      	bne.n	80025cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <ADC_Enable+0xfc>)
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00d      	beq.n	8002522 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	f043 0210 	orr.w	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	f043 0201 	orr.w	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e055      	b.n	80025ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff f960 	bl	80017ec <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800252c:	482b      	ldr	r0, [pc, #172]	; (80025dc <ADC_Enable+0x100>)
 800252e:	f7ff f80f 	bl	8001550 <LL_ADC_GetCommonPathInternalCh>
 8002532:	4603      	mov	r3, r0
 8002534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800253c:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <ADC_Enable+0x104>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	099b      	lsrs	r3, r3, #6
 8002542:	4a28      	ldr	r2, [pc, #160]	; (80025e4 <ADC_Enable+0x108>)
 8002544:	fba2 2303 	umull	r2, r3, r2, r3
 8002548:	099b      	lsrs	r3, r3, #6
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002556:	e002      	b.n	800255e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	3b01      	subs	r3, #1
 800255c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f9      	bne.n	8002558 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002564:	f7fe ff9e 	bl	80014a4 <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800256a:	e028      	b.n	80025be <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff f94f 	bl	8001814 <LL_ADC_IsEnabled>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d104      	bne.n	8002586 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff f933 	bl	80017ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002586:	f7fe ff8d 	bl	80014a4 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d914      	bls.n	80025be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d00d      	beq.n	80025be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f043 0210 	orr.w	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e007      	b.n	80025ce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d1cf      	bne.n	800256c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	8000003f 	.word	0x8000003f
 80025dc:	50040300 	.word	0x50040300
 80025e0:	20000014 	.word	0x20000014
 80025e4:	053e2d63 	.word	0x053e2d63

080025e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d14b      	bne.n	800269a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d021      	beq.n	8002660 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fff8 	bl	8001616 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d032      	beq.n	8002692 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d12b      	bne.n	8002692 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d11f      	bne.n	8002692 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
 800265e:	e018      	b.n	8002692 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d111      	bne.n	8002692 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d105      	bne.n	8002692 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	f043 0201 	orr.w	r2, r3, #1
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f7fd fdb2 	bl	80001fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002698:	e00e      	b.n	80026b8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f7ff fb1e 	bl	8001ce8 <HAL_ADC_ErrorCallback>
}
 80026ac:	e004      	b.n	80026b8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4798      	blx	r3
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f7ff fb00 	bl	8001cd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	f043 0204 	orr.w	r2, r3, #4
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f7ff faf0 	bl	8001ce8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002708:	bf00      	nop
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <LL_ADC_IsEnabled>:
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <LL_ADC_IsEnabled+0x18>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <LL_ADC_IsEnabled+0x1a>
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <LL_ADC_REG_IsConversionOngoing>:
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b04      	cmp	r3, #4
 8002748:	d101      	bne.n	800274e <LL_ADC_REG_IsConversionOngoing+0x18>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b09f      	sub	sp, #124	; 0x7c
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002776:	2302      	movs	r3, #2
 8002778:	e093      	b.n	80028a2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002782:	2300      	movs	r3, #0
 8002784:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002786:	2300      	movs	r3, #0
 8002788:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a47      	ldr	r2, [pc, #284]	; (80028ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d102      	bne.n	800279a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002794:	4b46      	ldr	r3, [pc, #280]	; (80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	e001      	b.n	800279e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10b      	bne.n	80027bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a8:	f043 0220 	orr.w	r2, r3, #32
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e072      	b.n	80028a2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ffb9 	bl	8002736 <LL_ADC_REG_IsConversionOngoing>
 80027c4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ffb3 	bl	8002736 <LL_ADC_REG_IsConversionOngoing>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d154      	bne.n	8002880 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80027d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d151      	bne.n	8002880 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027dc:	4b35      	ldr	r3, [pc, #212]	; (80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80027de:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d02c      	beq.n	8002842 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	6859      	ldr	r1, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027fa:	035b      	lsls	r3, r3, #13
 80027fc:	430b      	orrs	r3, r1
 80027fe:	431a      	orrs	r2, r3
 8002800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002802:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002804:	4829      	ldr	r0, [pc, #164]	; (80028ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002806:	f7ff ff83 	bl	8002710 <LL_ADC_IsEnabled>
 800280a:	4604      	mov	r4, r0
 800280c:	4828      	ldr	r0, [pc, #160]	; (80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800280e:	f7ff ff7f 	bl	8002710 <LL_ADC_IsEnabled>
 8002812:	4603      	mov	r3, r0
 8002814:	431c      	orrs	r4, r3
 8002816:	4828      	ldr	r0, [pc, #160]	; (80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002818:	f7ff ff7a 	bl	8002710 <LL_ADC_IsEnabled>
 800281c:	4603      	mov	r3, r0
 800281e:	4323      	orrs	r3, r4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d137      	bne.n	8002894 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800282c:	f023 030f 	bic.w	r3, r3, #15
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	6811      	ldr	r1, [r2, #0]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	6892      	ldr	r2, [r2, #8]
 8002838:	430a      	orrs	r2, r1
 800283a:	431a      	orrs	r2, r3
 800283c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800283e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002840:	e028      	b.n	8002894 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800284a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800284e:	4817      	ldr	r0, [pc, #92]	; (80028ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002850:	f7ff ff5e 	bl	8002710 <LL_ADC_IsEnabled>
 8002854:	4604      	mov	r4, r0
 8002856:	4816      	ldr	r0, [pc, #88]	; (80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002858:	f7ff ff5a 	bl	8002710 <LL_ADC_IsEnabled>
 800285c:	4603      	mov	r3, r0
 800285e:	431c      	orrs	r4, r3
 8002860:	4815      	ldr	r0, [pc, #84]	; (80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002862:	f7ff ff55 	bl	8002710 <LL_ADC_IsEnabled>
 8002866:	4603      	mov	r3, r0
 8002868:	4323      	orrs	r3, r4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d112      	bne.n	8002894 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800286e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002876:	f023 030f 	bic.w	r3, r3, #15
 800287a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800287c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800287e:	e009      	b.n	8002894 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002892:	e000      	b.n	8002896 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002894:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800289e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	377c      	adds	r7, #124	; 0x7c
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd90      	pop	{r4, r7, pc}
 80028aa:	bf00      	nop
 80028ac:	50040000 	.word	0x50040000
 80028b0:	50040100 	.word	0x50040100
 80028b4:	50040300 	.word	0x50040300
 80028b8:	50040200 	.word	0x50040200

080028bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <__NVIC_SetPriorityGrouping+0x44>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d8:	4013      	ands	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ee:	4a04      	ldr	r2, [pc, #16]	; (8002900 <__NVIC_SetPriorityGrouping+0x44>)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	60d3      	str	r3, [r2, #12]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <__NVIC_GetPriorityGrouping+0x18>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	f003 0307 	and.w	r3, r3, #7
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	2b00      	cmp	r3, #0
 8002930:	db0b      	blt.n	800294a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	4907      	ldr	r1, [pc, #28]	; (8002958 <__NVIC_EnableIRQ+0x38>)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2001      	movs	r0, #1
 8002942:	fa00 f202 	lsl.w	r2, r0, r2
 8002946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100

0800295c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	6039      	str	r1, [r7, #0]
 8002966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296c:	2b00      	cmp	r3, #0
 800296e:	db0a      	blt.n	8002986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	490c      	ldr	r1, [pc, #48]	; (80029a8 <__NVIC_SetPriority+0x4c>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	0112      	lsls	r2, r2, #4
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	440b      	add	r3, r1
 8002980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002984:	e00a      	b.n	800299c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4908      	ldr	r1, [pc, #32]	; (80029ac <__NVIC_SetPriority+0x50>)
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	3b04      	subs	r3, #4
 8002994:	0112      	lsls	r2, r2, #4
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	440b      	add	r3, r1
 800299a:	761a      	strb	r2, [r3, #24]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000e100 	.word	0xe000e100
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f1c3 0307 	rsb	r3, r3, #7
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	bf28      	it	cs
 80029ce:	2304      	movcs	r3, #4
 80029d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3304      	adds	r3, #4
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d902      	bls.n	80029e0 <NVIC_EncodePriority+0x30>
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3b03      	subs	r3, #3
 80029de:	e000      	b.n	80029e2 <NVIC_EncodePriority+0x32>
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	f04f 32ff 	mov.w	r2, #4294967295
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43da      	mvns	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	401a      	ands	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f8:	f04f 31ff 	mov.w	r1, #4294967295
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	43d9      	mvns	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	4313      	orrs	r3, r2
         );
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3724      	adds	r7, #36	; 0x24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a28:	d301      	bcc.n	8002a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00f      	b.n	8002a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <SysTick_Config+0x40>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a36:	210f      	movs	r1, #15
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3c:	f7ff ff8e 	bl	800295c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <SysTick_Config+0x40>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a46:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <SysTick_Config+0x40>)
 8002a48:	2207      	movs	r2, #7
 8002a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	e000e010 	.word	0xe000e010

08002a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ff29 	bl	80028bc <__NVIC_SetPriorityGrouping>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	4603      	mov	r3, r0
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a84:	f7ff ff3e 	bl	8002904 <__NVIC_GetPriorityGrouping>
 8002a88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	6978      	ldr	r0, [r7, #20]
 8002a90:	f7ff ff8e 	bl	80029b0 <NVIC_EncodePriority>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ff5d 	bl	800295c <__NVIC_SetPriority>
}
 8002aa2:	bf00      	nop
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff31 	bl	8002920 <__NVIC_EnableIRQ>
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ffa2 	bl	8002a18 <SysTick_Config>
 8002ad4:	4603      	mov	r3, r0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e098      	b.n	8002c24 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	4b4d      	ldr	r3, [pc, #308]	; (8002c30 <HAL_DMA_Init+0x150>)
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d80f      	bhi.n	8002b1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <HAL_DMA_Init+0x154>)
 8002b06:	4413      	add	r3, r2
 8002b08:	4a4b      	ldr	r2, [pc, #300]	; (8002c38 <HAL_DMA_Init+0x158>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	009a      	lsls	r2, r3, #2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a48      	ldr	r2, [pc, #288]	; (8002c3c <HAL_DMA_Init+0x15c>)
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40
 8002b1c:	e00e      	b.n	8002b3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b46      	ldr	r3, [pc, #280]	; (8002c40 <HAL_DMA_Init+0x160>)
 8002b26:	4413      	add	r3, r2
 8002b28:	4a43      	ldr	r2, [pc, #268]	; (8002c38 <HAL_DMA_Init+0x158>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	009a      	lsls	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a42      	ldr	r2, [pc, #264]	; (8002c44 <HAL_DMA_Init+0x164>)
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b96:	d039      	beq.n	8002c0c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	4a27      	ldr	r2, [pc, #156]	; (8002c3c <HAL_DMA_Init+0x15c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d11a      	bne.n	8002bd8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ba2:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <HAL_DMA_Init+0x168>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f003 031c 	and.w	r3, r3, #28
 8002bae:	210f      	movs	r1, #15
 8002bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	4924      	ldr	r1, [pc, #144]	; (8002c48 <HAL_DMA_Init+0x168>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002bbc:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <HAL_DMA_Init+0x168>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	f003 031c 	and.w	r3, r3, #28
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	491d      	ldr	r1, [pc, #116]	; (8002c48 <HAL_DMA_Init+0x168>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]
 8002bd6:	e019      	b.n	8002c0c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002bd8:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <HAL_DMA_Init+0x16c>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	f003 031c 	and.w	r3, r3, #28
 8002be4:	210f      	movs	r1, #15
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	4917      	ldr	r1, [pc, #92]	; (8002c4c <HAL_DMA_Init+0x16c>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002bf2:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <HAL_DMA_Init+0x16c>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6859      	ldr	r1, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f003 031c 	and.w	r3, r3, #28
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	4911      	ldr	r1, [pc, #68]	; (8002c4c <HAL_DMA_Init+0x16c>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	40020407 	.word	0x40020407
 8002c34:	bffdfff8 	.word	0xbffdfff8
 8002c38:	cccccccd 	.word	0xcccccccd
 8002c3c:	40020000 	.word	0x40020000
 8002c40:	bffdfbf8 	.word	0xbffdfbf8
 8002c44:	40020400 	.word	0x40020400
 8002c48:	400200a8 	.word	0x400200a8
 8002c4c:	400204a8 	.word	0x400204a8

08002c50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_DMA_Start_IT+0x20>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e04b      	b.n	8002d08 <HAL_DMA_Start_IT+0xb8>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d13a      	bne.n	8002cfa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f8e0 	bl	8002e6e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 020e 	orr.w	r2, r2, #14
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e00f      	b.n	8002ce8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0204 	bic.w	r2, r2, #4
 8002cd6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 020a 	orr.w	r2, r2, #10
 8002ce6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e005      	b.n	8002d06 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
 8002d04:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2c:	f003 031c 	and.w	r3, r3, #28
 8002d30:	2204      	movs	r2, #4
 8002d32:	409a      	lsls	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d026      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x7a>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d021      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d107      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0204 	bic.w	r2, r2, #4
 8002d62:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	f003 021c 	and.w	r2, r3, #28
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	2104      	movs	r1, #4
 8002d72:	fa01 f202 	lsl.w	r2, r1, r2
 8002d76:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d071      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002d88:	e06c      	b.n	8002e64 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f003 031c 	and.w	r3, r3, #28
 8002d92:	2202      	movs	r2, #2
 8002d94:	409a      	lsls	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d02e      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xec>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d029      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10b      	bne.n	8002dce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 020a 	bic.w	r2, r2, #10
 8002dc4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	f003 021c 	and.w	r2, r3, #28
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	2102      	movs	r1, #2
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d038      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002dfa:	e033      	b.n	8002e64 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e00:	f003 031c 	and.w	r3, r3, #28
 8002e04:	2208      	movs	r2, #8
 8002e06:	409a      	lsls	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d02a      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x156>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d025      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 020e 	bic.w	r2, r2, #14
 8002e28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f003 021c 	and.w	r2, r3, #28
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	2101      	movs	r1, #1
 8002e38:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d004      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
}
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	f003 021c 	and.w	r2, r3, #28
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	2101      	movs	r1, #1
 8002e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b10      	cmp	r3, #16
 8002e9e:	d108      	bne.n	8002eb2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002eb0:	e007      	b.n	8002ec2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	60da      	str	r2, [r3, #12]
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ede:	e17f      	b.n	80031e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eec:	4013      	ands	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8171 	beq.w	80031da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d005      	beq.n	8002f10 <HAL_GPIO_Init+0x40>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d130      	bne.n	8002f72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f46:	2201      	movs	r2, #1
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	f003 0201 	and.w	r2, r3, #1
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d118      	bne.n	8002fb0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f84:	2201      	movs	r2, #1
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	08db      	lsrs	r3, r3, #3
 8002f9a:	f003 0201 	and.w	r2, r3, #1
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d017      	beq.n	8002fec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d123      	bne.n	8003040 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	08da      	lsrs	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3208      	adds	r2, #8
 8003000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	220f      	movs	r2, #15
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	08da      	lsrs	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3208      	adds	r2, #8
 800303a:	6939      	ldr	r1, [r7, #16]
 800303c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0203 	and.w	r2, r3, #3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80ac 	beq.w	80031da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003082:	4b5f      	ldr	r3, [pc, #380]	; (8003200 <HAL_GPIO_Init+0x330>)
 8003084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003086:	4a5e      	ldr	r2, [pc, #376]	; (8003200 <HAL_GPIO_Init+0x330>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6613      	str	r3, [r2, #96]	; 0x60
 800308e:	4b5c      	ldr	r3, [pc, #368]	; (8003200 <HAL_GPIO_Init+0x330>)
 8003090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800309a:	4a5a      	ldr	r2, [pc, #360]	; (8003204 <HAL_GPIO_Init+0x334>)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	089b      	lsrs	r3, r3, #2
 80030a0:	3302      	adds	r3, #2
 80030a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	220f      	movs	r2, #15
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030c4:	d025      	beq.n	8003112 <HAL_GPIO_Init+0x242>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4f      	ldr	r2, [pc, #316]	; (8003208 <HAL_GPIO_Init+0x338>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01f      	beq.n	800310e <HAL_GPIO_Init+0x23e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4e      	ldr	r2, [pc, #312]	; (800320c <HAL_GPIO_Init+0x33c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d019      	beq.n	800310a <HAL_GPIO_Init+0x23a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4d      	ldr	r2, [pc, #308]	; (8003210 <HAL_GPIO_Init+0x340>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_GPIO_Init+0x236>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4c      	ldr	r2, [pc, #304]	; (8003214 <HAL_GPIO_Init+0x344>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00d      	beq.n	8003102 <HAL_GPIO_Init+0x232>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4b      	ldr	r2, [pc, #300]	; (8003218 <HAL_GPIO_Init+0x348>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <HAL_GPIO_Init+0x22e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4a      	ldr	r2, [pc, #296]	; (800321c <HAL_GPIO_Init+0x34c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_GPIO_Init+0x22a>
 80030f6:	2306      	movs	r3, #6
 80030f8:	e00c      	b.n	8003114 <HAL_GPIO_Init+0x244>
 80030fa:	2307      	movs	r3, #7
 80030fc:	e00a      	b.n	8003114 <HAL_GPIO_Init+0x244>
 80030fe:	2305      	movs	r3, #5
 8003100:	e008      	b.n	8003114 <HAL_GPIO_Init+0x244>
 8003102:	2304      	movs	r3, #4
 8003104:	e006      	b.n	8003114 <HAL_GPIO_Init+0x244>
 8003106:	2303      	movs	r3, #3
 8003108:	e004      	b.n	8003114 <HAL_GPIO_Init+0x244>
 800310a:	2302      	movs	r3, #2
 800310c:	e002      	b.n	8003114 <HAL_GPIO_Init+0x244>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_GPIO_Init+0x244>
 8003112:	2300      	movs	r3, #0
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	f002 0203 	and.w	r2, r2, #3
 800311a:	0092      	lsls	r2, r2, #2
 800311c:	4093      	lsls	r3, r2
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003124:	4937      	ldr	r1, [pc, #220]	; (8003204 <HAL_GPIO_Init+0x334>)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	089b      	lsrs	r3, r3, #2
 800312a:	3302      	adds	r3, #2
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003132:	4b3b      	ldr	r3, [pc, #236]	; (8003220 <HAL_GPIO_Init+0x350>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003156:	4a32      	ldr	r2, [pc, #200]	; (8003220 <HAL_GPIO_Init+0x350>)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800315c:	4b30      	ldr	r3, [pc, #192]	; (8003220 <HAL_GPIO_Init+0x350>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	43db      	mvns	r3, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003180:	4a27      	ldr	r2, [pc, #156]	; (8003220 <HAL_GPIO_Init+0x350>)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003186:	4b26      	ldr	r3, [pc, #152]	; (8003220 <HAL_GPIO_Init+0x350>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031aa:	4a1d      	ldr	r2, [pc, #116]	; (8003220 <HAL_GPIO_Init+0x350>)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031b0:	4b1b      	ldr	r3, [pc, #108]	; (8003220 <HAL_GPIO_Init+0x350>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031d4:	4a12      	ldr	r2, [pc, #72]	; (8003220 <HAL_GPIO_Init+0x350>)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	3301      	adds	r3, #1
 80031de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f47f ae78 	bne.w	8002ee0 <HAL_GPIO_Init+0x10>
  }
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	40010000 	.word	0x40010000
 8003208:	48000400 	.word	0x48000400
 800320c:	48000800 	.word	0x48000800
 8003210:	48000c00 	.word	0x48000c00
 8003214:	48001000 	.word	0x48001000
 8003218:	48001400 	.word	0x48001400
 800321c:	48001800 	.word	0x48001800
 8003220:	40010400 	.word	0x40010400

08003224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	887b      	ldrh	r3, [r7, #2]
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	e001      	b.n	8003246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003242:	2300      	movs	r3, #0
 8003244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
 8003260:	4613      	mov	r3, r2
 8003262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003264:	787b      	ldrb	r3, [r7, #1]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003270:	e002      	b.n	8003278 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	4013      	ands	r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d006      	beq.n	80032a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800329a:	4a05      	ldr	r2, [pc, #20]	; (80032b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fc ff90 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40010400 	.word	0x40010400

080032b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <HAL_PWREx_GetVoltageRange+0x18>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40007000 	.word	0x40007000

080032d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032de:	d130      	bne.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e0:	4b23      	ldr	r3, [pc, #140]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ec:	d038      	beq.n	8003360 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032f6:	4a1e      	ldr	r2, [pc, #120]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032fe:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2232      	movs	r2, #50	; 0x32
 8003304:	fb02 f303 	mul.w	r3, r2, r3
 8003308:	4a1b      	ldr	r2, [pc, #108]	; (8003378 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0c9b      	lsrs	r3, r3, #18
 8003310:	3301      	adds	r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003314:	e002      	b.n	800331c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	3b01      	subs	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800331c:	4b14      	ldr	r3, [pc, #80]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003328:	d102      	bne.n	8003330 <HAL_PWREx_ControlVoltageScaling+0x60>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1f2      	bne.n	8003316 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333c:	d110      	bne.n	8003360 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e00f      	b.n	8003362 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334e:	d007      	beq.n	8003360 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003350:	4b07      	ldr	r3, [pc, #28]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003358:	4a05      	ldr	r2, [pc, #20]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800335e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40007000 	.word	0x40007000
 8003374:	20000014 	.word	0x20000014
 8003378:	431bde83 	.word	0x431bde83

0800337c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e3ca      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338e:	4b97      	ldr	r3, [pc, #604]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003398:	4b94      	ldr	r3, [pc, #592]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 80e4 	beq.w	8003578 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <HAL_RCC_OscConfig+0x4a>
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b0c      	cmp	r3, #12
 80033ba:	f040 808b 	bne.w	80034d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	f040 8087 	bne.w	80034d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033c6:	4b89      	ldr	r3, [pc, #548]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_RCC_OscConfig+0x62>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e3a2      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1a      	ldr	r2, [r3, #32]
 80033e2:	4b82      	ldr	r3, [pc, #520]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d004      	beq.n	80033f8 <HAL_RCC_OscConfig+0x7c>
 80033ee:	4b7f      	ldr	r3, [pc, #508]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f6:	e005      	b.n	8003404 <HAL_RCC_OscConfig+0x88>
 80033f8:	4b7c      	ldr	r3, [pc, #496]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80033fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003404:	4293      	cmp	r3, r2
 8003406:	d223      	bcs.n	8003450 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fd1d 	bl	8003e4c <RCC_SetFlashLatencyFromMSIRange>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e383      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800341c:	4b73      	ldr	r3, [pc, #460]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a72      	ldr	r2, [pc, #456]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003422:	f043 0308 	orr.w	r3, r3, #8
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	4b70      	ldr	r3, [pc, #448]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	496d      	ldr	r1, [pc, #436]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800343a:	4b6c      	ldr	r3, [pc, #432]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	4968      	ldr	r1, [pc, #416]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800344a:	4313      	orrs	r3, r2
 800344c:	604b      	str	r3, [r1, #4]
 800344e:	e025      	b.n	800349c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003450:	4b66      	ldr	r3, [pc, #408]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a65      	ldr	r2, [pc, #404]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003456:	f043 0308 	orr.w	r3, r3, #8
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4b63      	ldr	r3, [pc, #396]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	4960      	ldr	r1, [pc, #384]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800346e:	4b5f      	ldr	r3, [pc, #380]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	495b      	ldr	r1, [pc, #364]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	4618      	mov	r0, r3
 800348e:	f000 fcdd 	bl	8003e4c <RCC_SetFlashLatencyFromMSIRange>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e343      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800349c:	f000 fc4a 	bl	8003d34 <HAL_RCC_GetSysClockFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b52      	ldr	r3, [pc, #328]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	4950      	ldr	r1, [pc, #320]	; (80035f0 <HAL_RCC_OscConfig+0x274>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
 80034b8:	4a4e      	ldr	r2, [pc, #312]	; (80035f4 <HAL_RCC_OscConfig+0x278>)
 80034ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034bc:	4b4e      	ldr	r3, [pc, #312]	; (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd ff9f 	bl	8001404 <HAL_InitTick>
 80034c6:	4603      	mov	r3, r0
 80034c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d052      	beq.n	8003576 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	e327      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d032      	beq.n	8003542 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034dc:	4b43      	ldr	r3, [pc, #268]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a42      	ldr	r2, [pc, #264]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034e8:	f7fd ffdc 	bl	80014a4 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034f0:	f7fd ffd8 	bl	80014a4 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e310      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003502:	4b3a      	ldr	r3, [pc, #232]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800350e:	4b37      	ldr	r3, [pc, #220]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a36      	ldr	r2, [pc, #216]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003514:	f043 0308 	orr.w	r3, r3, #8
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	4b34      	ldr	r3, [pc, #208]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4931      	ldr	r1, [pc, #196]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003528:	4313      	orrs	r3, r2
 800352a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800352c:	4b2f      	ldr	r3, [pc, #188]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	021b      	lsls	r3, r3, #8
 800353a:	492c      	ldr	r1, [pc, #176]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800353c:	4313      	orrs	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
 8003540:	e01a      	b.n	8003578 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003542:	4b2a      	ldr	r3, [pc, #168]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a29      	ldr	r2, [pc, #164]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800354e:	f7fd ffa9 	bl	80014a4 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003556:	f7fd ffa5 	bl	80014a4 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e2dd      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003568:	4b20      	ldr	r3, [pc, #128]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f0      	bne.n	8003556 <HAL_RCC_OscConfig+0x1da>
 8003574:	e000      	b.n	8003578 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003576:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d074      	beq.n	800366e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2b08      	cmp	r3, #8
 8003588:	d005      	beq.n	8003596 <HAL_RCC_OscConfig+0x21a>
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2b0c      	cmp	r3, #12
 800358e:	d10e      	bne.n	80035ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d10b      	bne.n	80035ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d064      	beq.n	800366c <HAL_RCC_OscConfig+0x2f0>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d160      	bne.n	800366c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e2ba      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b6:	d106      	bne.n	80035c6 <HAL_RCC_OscConfig+0x24a>
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0b      	ldr	r2, [pc, #44]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80035be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	e026      	b.n	8003614 <HAL_RCC_OscConfig+0x298>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ce:	d115      	bne.n	80035fc <HAL_RCC_OscConfig+0x280>
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a05      	ldr	r2, [pc, #20]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80035d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a02      	ldr	r2, [pc, #8]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 80035e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	e014      	b.n	8003614 <HAL_RCC_OscConfig+0x298>
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
 80035f0:	080062cc 	.word	0x080062cc
 80035f4:	20000014 	.word	0x20000014
 80035f8:	20000018 	.word	0x20000018
 80035fc:	4ba0      	ldr	r3, [pc, #640]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a9f      	ldr	r2, [pc, #636]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b9d      	ldr	r3, [pc, #628]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a9c      	ldr	r2, [pc, #624]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800360e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d013      	beq.n	8003644 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fd ff42 	bl	80014a4 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003624:	f7fd ff3e 	bl	80014a4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	; 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e276      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003636:	4b92      	ldr	r3, [pc, #584]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x2a8>
 8003642:	e014      	b.n	800366e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fd ff2e 	bl	80014a4 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800364c:	f7fd ff2a 	bl	80014a4 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	; 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e262      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800365e:	4b88      	ldr	r3, [pc, #544]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x2d0>
 800366a:	e000      	b.n	800366e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d060      	beq.n	800373c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d005      	beq.n	800368c <HAL_RCC_OscConfig+0x310>
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d119      	bne.n	80036ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d116      	bne.n	80036ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800368c:	4b7c      	ldr	r3, [pc, #496]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_OscConfig+0x328>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e23f      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	4b76      	ldr	r3, [pc, #472]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	061b      	lsls	r3, r3, #24
 80036b2:	4973      	ldr	r1, [pc, #460]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b8:	e040      	b.n	800373c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d023      	beq.n	800370a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c2:	4b6f      	ldr	r3, [pc, #444]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a6e      	ldr	r2, [pc, #440]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80036c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ce:	f7fd fee9 	bl	80014a4 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d6:	f7fd fee5 	bl	80014a4 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e21d      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036e8:	4b65      	ldr	r3, [pc, #404]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f4:	4b62      	ldr	r3, [pc, #392]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	061b      	lsls	r3, r3, #24
 8003702:	495f      	ldr	r1, [pc, #380]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003704:	4313      	orrs	r3, r2
 8003706:	604b      	str	r3, [r1, #4]
 8003708:	e018      	b.n	800373c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370a:	4b5d      	ldr	r3, [pc, #372]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a5c      	ldr	r2, [pc, #368]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fd fec5 	bl	80014a4 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371e:	f7fd fec1 	bl	80014a4 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e1f9      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003730:	4b53      	ldr	r3, [pc, #332]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f0      	bne.n	800371e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d03c      	beq.n	80037c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01c      	beq.n	800378a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003750:	4b4b      	ldr	r3, [pc, #300]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003756:	4a4a      	ldr	r2, [pc, #296]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003760:	f7fd fea0 	bl	80014a4 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003768:	f7fd fe9c 	bl	80014a4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e1d4      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800377a:	4b41      	ldr	r3, [pc, #260]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800377c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ef      	beq.n	8003768 <HAL_RCC_OscConfig+0x3ec>
 8003788:	e01b      	b.n	80037c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800378a:	4b3d      	ldr	r3, [pc, #244]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800378c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003790:	4a3b      	ldr	r2, [pc, #236]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003792:	f023 0301 	bic.w	r3, r3, #1
 8003796:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379a:	f7fd fe83 	bl	80014a4 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a2:	f7fd fe7f 	bl	80014a4 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e1b7      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037b4:	4b32      	ldr	r3, [pc, #200]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80037b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1ef      	bne.n	80037a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80a6 	beq.w	800391c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d0:	2300      	movs	r3, #0
 80037d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037d4:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10d      	bne.n	80037fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e0:	4b27      	ldr	r3, [pc, #156]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	4a26      	ldr	r2, [pc, #152]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80037e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6593      	str	r3, [r2, #88]	; 0x58
 80037ec:	4b24      	ldr	r3, [pc, #144]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037f8:	2301      	movs	r3, #1
 80037fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037fc:	4b21      	ldr	r3, [pc, #132]	; (8003884 <HAL_RCC_OscConfig+0x508>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d118      	bne.n	800383a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003808:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <HAL_RCC_OscConfig+0x508>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <HAL_RCC_OscConfig+0x508>)
 800380e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003812:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003814:	f7fd fe46 	bl	80014a4 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381c:	f7fd fe42 	bl	80014a4 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e17a      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800382e:	4b15      	ldr	r3, [pc, #84]	; (8003884 <HAL_RCC_OscConfig+0x508>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d108      	bne.n	8003854 <HAL_RCC_OscConfig+0x4d8>
 8003842:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003848:	4a0d      	ldr	r2, [pc, #52]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003852:	e029      	b.n	80038a8 <HAL_RCC_OscConfig+0x52c>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b05      	cmp	r3, #5
 800385a:	d115      	bne.n	8003888 <HAL_RCC_OscConfig+0x50c>
 800385c:	4b08      	ldr	r3, [pc, #32]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	4a07      	ldr	r2, [pc, #28]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003864:	f043 0304 	orr.w	r3, r3, #4
 8003868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	4a03      	ldr	r2, [pc, #12]	; (8003880 <HAL_RCC_OscConfig+0x504>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800387c:	e014      	b.n	80038a8 <HAL_RCC_OscConfig+0x52c>
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	40007000 	.word	0x40007000
 8003888:	4b9c      	ldr	r3, [pc, #624]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	4a9b      	ldr	r2, [pc, #620]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003898:	4b98      	ldr	r3, [pc, #608]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	4a97      	ldr	r2, [pc, #604]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 80038a0:	f023 0304 	bic.w	r3, r3, #4
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d016      	beq.n	80038de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fd fdf8 	bl	80014a4 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b8:	f7fd fdf4 	bl	80014a4 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e12a      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ce:	4b8b      	ldr	r3, [pc, #556]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0ed      	beq.n	80038b8 <HAL_RCC_OscConfig+0x53c>
 80038dc:	e015      	b.n	800390a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038de:	f7fd fde1 	bl	80014a4 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038e4:	e00a      	b.n	80038fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e6:	f7fd fddd 	bl	80014a4 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e113      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038fc:	4b7f      	ldr	r3, [pc, #508]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1ed      	bne.n	80038e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800390a:	7ffb      	ldrb	r3, [r7, #31]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d105      	bne.n	800391c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003910:	4b7a      	ldr	r3, [pc, #488]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	4a79      	ldr	r2, [pc, #484]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80fe 	beq.w	8003b22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	2b02      	cmp	r3, #2
 800392c:	f040 80d0 	bne.w	8003ad0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003930:	4b72      	ldr	r3, [pc, #456]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f003 0203 	and.w	r2, r3, #3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	429a      	cmp	r2, r3
 8003942:	d130      	bne.n	80039a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	3b01      	subs	r3, #1
 8003950:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003952:	429a      	cmp	r2, r3
 8003954:	d127      	bne.n	80039a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003960:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d11f      	bne.n	80039a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003970:	2a07      	cmp	r2, #7
 8003972:	bf14      	ite	ne
 8003974:	2201      	movne	r2, #1
 8003976:	2200      	moveq	r2, #0
 8003978:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800397a:	4293      	cmp	r3, r2
 800397c:	d113      	bne.n	80039a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003988:	085b      	lsrs	r3, r3, #1
 800398a:	3b01      	subs	r3, #1
 800398c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d109      	bne.n	80039a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	3b01      	subs	r3, #1
 80039a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d06e      	beq.n	8003a84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	2b0c      	cmp	r3, #12
 80039aa:	d069      	beq.n	8003a80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039ac:	4b53      	ldr	r3, [pc, #332]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80039b8:	4b50      	ldr	r3, [pc, #320]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0ad      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039c8:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a4b      	ldr	r2, [pc, #300]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 80039ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039d4:	f7fd fd66 	bl	80014a4 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fd fd62 	bl	80014a4 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e09a      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ee:	4b43      	ldr	r3, [pc, #268]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039fa:	4b40      	ldr	r3, [pc, #256]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	4b40      	ldr	r3, [pc, #256]	; (8003b00 <HAL_RCC_OscConfig+0x784>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a0a:	3a01      	subs	r2, #1
 8003a0c:	0112      	lsls	r2, r2, #4
 8003a0e:	4311      	orrs	r1, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a14:	0212      	lsls	r2, r2, #8
 8003a16:	4311      	orrs	r1, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a1c:	0852      	lsrs	r2, r2, #1
 8003a1e:	3a01      	subs	r2, #1
 8003a20:	0552      	lsls	r2, r2, #21
 8003a22:	4311      	orrs	r1, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a28:	0852      	lsrs	r2, r2, #1
 8003a2a:	3a01      	subs	r2, #1
 8003a2c:	0652      	lsls	r2, r2, #25
 8003a2e:	4311      	orrs	r1, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a34:	0912      	lsrs	r2, r2, #4
 8003a36:	0452      	lsls	r2, r2, #17
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	4930      	ldr	r1, [pc, #192]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a40:	4b2e      	ldr	r3, [pc, #184]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a2d      	ldr	r2, [pc, #180]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a4c:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4a2a      	ldr	r2, [pc, #168]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a58:	f7fd fd24 	bl	80014a4 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fd fd20 	bl	80014a4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e058      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a72:	4b22      	ldr	r3, [pc, #136]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a7e:	e050      	b.n	8003b22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e04f      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a84:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d148      	bne.n	8003b22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a90:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a19      	ldr	r2, [pc, #100]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a9c:	4b17      	ldr	r3, [pc, #92]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	4a16      	ldr	r2, [pc, #88]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003aa8:	f7fd fcfc 	bl	80014a4 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fd fcf8 	bl	80014a4 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e030      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac2:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x734>
 8003ace:	e028      	b.n	8003b22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b0c      	cmp	r3, #12
 8003ad4:	d023      	beq.n	8003b1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a08      	ldr	r2, [pc, #32]	; (8003afc <HAL_RCC_OscConfig+0x780>)
 8003adc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fd fcdf 	bl	80014a4 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae8:	e00c      	b.n	8003b04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aea:	f7fd fcdb 	bl	80014a4 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d905      	bls.n	8003b04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e013      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
 8003afc:	40021000 	.word	0x40021000
 8003b00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b04:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <HAL_RCC_OscConfig+0x7b0>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1ec      	bne.n	8003aea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_RCC_OscConfig+0x7b0>)
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	4905      	ldr	r1, [pc, #20]	; (8003b2c <HAL_RCC_OscConfig+0x7b0>)
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_RCC_OscConfig+0x7b4>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	60cb      	str	r3, [r1, #12]
 8003b1c:	e001      	b.n	8003b22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3720      	adds	r7, #32
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	feeefffc 	.word	0xfeeefffc

08003b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0e7      	b.n	8003d18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b48:	4b75      	ldr	r3, [pc, #468]	; (8003d20 <HAL_RCC_ClockConfig+0x1ec>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d910      	bls.n	8003b78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b72      	ldr	r3, [pc, #456]	; (8003d20 <HAL_RCC_ClockConfig+0x1ec>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 0207 	bic.w	r2, r3, #7
 8003b5e:	4970      	ldr	r1, [pc, #448]	; (8003d20 <HAL_RCC_ClockConfig+0x1ec>)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	4b6e      	ldr	r3, [pc, #440]	; (8003d20 <HAL_RCC_ClockConfig+0x1ec>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0cf      	b.n	8003d18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d010      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	4b66      	ldr	r3, [pc, #408]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d908      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b94:	4b63      	ldr	r3, [pc, #396]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4960      	ldr	r1, [pc, #384]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d04c      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d107      	bne.n	8003bca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bba:	4b5a      	ldr	r3, [pc, #360]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d121      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e0a6      	b.n	8003d18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd2:	4b54      	ldr	r3, [pc, #336]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d115      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e09a      	b.n	8003d18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d107      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bea:	4b4e      	ldr	r3, [pc, #312]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e08e      	b.n	8003d18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bfa:	4b4a      	ldr	r3, [pc, #296]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e086      	b.n	8003d18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c0a:	4b46      	ldr	r3, [pc, #280]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f023 0203 	bic.w	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4943      	ldr	r1, [pc, #268]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1c:	f7fd fc42 	bl	80014a4 <HAL_GetTick>
 8003c20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c24:	f7fd fc3e 	bl	80014a4 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e06e      	b.n	8003d18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	4b3a      	ldr	r3, [pc, #232]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 020c 	and.w	r2, r3, #12
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d1eb      	bne.n	8003c24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d010      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d208      	bcs.n	8003c7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c68:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	492b      	ldr	r1, [pc, #172]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c7a:	4b29      	ldr	r3, [pc, #164]	; (8003d20 <HAL_RCC_ClockConfig+0x1ec>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d210      	bcs.n	8003caa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <HAL_RCC_ClockConfig+0x1ec>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f023 0207 	bic.w	r2, r3, #7
 8003c90:	4923      	ldr	r1, [pc, #140]	; (8003d20 <HAL_RCC_ClockConfig+0x1ec>)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c98:	4b21      	ldr	r3, [pc, #132]	; (8003d20 <HAL_RCC_ClockConfig+0x1ec>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d001      	beq.n	8003caa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e036      	b.n	8003d18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d008      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	4918      	ldr	r1, [pc, #96]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d009      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cd4:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4910      	ldr	r1, [pc, #64]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ce8:	f000 f824 	bl	8003d34 <HAL_RCC_GetSysClockFreq>
 8003cec:	4602      	mov	r2, r0
 8003cee:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	091b      	lsrs	r3, r3, #4
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	490b      	ldr	r1, [pc, #44]	; (8003d28 <HAL_RCC_ClockConfig+0x1f4>)
 8003cfa:	5ccb      	ldrb	r3, [r1, r3]
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
 8003d04:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <HAL_RCC_ClockConfig+0x1f8>)
 8003d06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <HAL_RCC_ClockConfig+0x1fc>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fd fb79 	bl	8001404 <HAL_InitTick>
 8003d12:	4603      	mov	r3, r0
 8003d14:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d16:	7afb      	ldrb	r3, [r7, #11]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40022000 	.word	0x40022000
 8003d24:	40021000 	.word	0x40021000
 8003d28:	080062cc 	.word	0x080062cc
 8003d2c:	20000014 	.word	0x20000014
 8003d30:	20000018 	.word	0x20000018

08003d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b089      	sub	sp, #36	; 0x24
 8003d38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d42:	4b3e      	ldr	r3, [pc, #248]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d4c:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x34>
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	d121      	bne.n	8003da6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d11e      	bne.n	8003da6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d68:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d107      	bne.n	8003d84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d74:	4b31      	ldr	r3, [pc, #196]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	e005      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d84:	4b2d      	ldr	r3, [pc, #180]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d90:	4a2b      	ldr	r2, [pc, #172]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10d      	bne.n	8003dbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003da4:	e00a      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d102      	bne.n	8003db2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dac:	4b25      	ldr	r3, [pc, #148]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	e004      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d101      	bne.n	8003dbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003db8:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b0c      	cmp	r3, #12
 8003dc0:	d134      	bne.n	8003e2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d003      	beq.n	8003dda <HAL_RCC_GetSysClockFreq+0xa6>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d003      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0xac>
 8003dd8:	e005      	b.n	8003de6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dda:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ddc:	617b      	str	r3, [r7, #20]
      break;
 8003dde:	e005      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x114>)
 8003de2:	617b      	str	r3, [r7, #20]
      break;
 8003de4:	e002      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	617b      	str	r3, [r7, #20]
      break;
 8003dea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dec:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	3301      	adds	r3, #1
 8003df8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dfa:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	0a1b      	lsrs	r3, r3, #8
 8003e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	fb03 f202 	mul.w	r2, r3, r2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e12:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	0e5b      	lsrs	r3, r3, #25
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e2c:	69bb      	ldr	r3, [r7, #24]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3724      	adds	r7, #36	; 0x24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	080062dc 	.word	0x080062dc
 8003e44:	00f42400 	.word	0x00f42400
 8003e48:	007a1200 	.word	0x007a1200

08003e4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e54:	2300      	movs	r3, #0
 8003e56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e58:	4b2a      	ldr	r3, [pc, #168]	; (8003f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e64:	f7ff fa26 	bl	80032b4 <HAL_PWREx_GetVoltageRange>
 8003e68:	6178      	str	r0, [r7, #20]
 8003e6a:	e014      	b.n	8003e96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e6c:	4b25      	ldr	r3, [pc, #148]	; (8003f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e76:	6593      	str	r3, [r2, #88]	; 0x58
 8003e78:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e84:	f7ff fa16 	bl	80032b4 <HAL_PWREx_GetVoltageRange>
 8003e88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e8a:	4b1e      	ldr	r3, [pc, #120]	; (8003f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8e:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e9c:	d10b      	bne.n	8003eb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b80      	cmp	r3, #128	; 0x80
 8003ea2:	d919      	bls.n	8003ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ea8:	d902      	bls.n	8003eb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eaa:	2302      	movs	r3, #2
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	e013      	b.n	8003ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	e010      	b.n	8003ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b80      	cmp	r3, #128	; 0x80
 8003eba:	d902      	bls.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	e00a      	b.n	8003ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b80      	cmp	r3, #128	; 0x80
 8003ec6:	d102      	bne.n	8003ece <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ec8:	2302      	movs	r3, #2
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	e004      	b.n	8003ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b70      	cmp	r3, #112	; 0x70
 8003ed2:	d101      	bne.n	8003ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f023 0207 	bic.w	r2, r3, #7
 8003ee0:	4909      	ldr	r1, [pc, #36]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ee8:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d001      	beq.n	8003efa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40022000 	.word	0x40022000

08003f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f14:	2300      	movs	r3, #0
 8003f16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f18:	2300      	movs	r3, #0
 8003f1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d041      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f30:	d02a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f36:	d824      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f3c:	d008      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f42:	d81e      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4c:	d010      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f4e:	e018      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f50:	4b86      	ldr	r3, [pc, #536]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a85      	ldr	r2, [pc, #532]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f5c:	e015      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3304      	adds	r3, #4
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fabb 	bl	80044e0 <RCCEx_PLLSAI1_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f6e:	e00c      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3320      	adds	r3, #32
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fba6 	bl	80046c8 <RCCEx_PLLSAI2_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f80:	e003      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	74fb      	strb	r3, [r7, #19]
      break;
 8003f86:	e000      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f8a:	7cfb      	ldrb	r3, [r7, #19]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10b      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f90:	4b76      	ldr	r3, [pc, #472]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f9e:	4973      	ldr	r1, [pc, #460]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fa6:	e001      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d041      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fc0:	d02a      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003fc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fc6:	d824      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fcc:	d008      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fd2:	d81e      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fdc:	d010      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fde:	e018      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fe0:	4b62      	ldr	r3, [pc, #392]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a61      	ldr	r2, [pc, #388]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fec:	e015      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fa73 	bl	80044e0 <RCCEx_PLLSAI1_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ffe:	e00c      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3320      	adds	r3, #32
 8004004:	2100      	movs	r1, #0
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fb5e 	bl	80046c8 <RCCEx_PLLSAI2_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004010:	e003      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	74fb      	strb	r3, [r7, #19]
      break;
 8004016:	e000      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800401a:	7cfb      	ldrb	r3, [r7, #19]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10b      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004020:	4b52      	ldr	r3, [pc, #328]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800402e:	494f      	ldr	r1, [pc, #316]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004036:	e001      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004038:	7cfb      	ldrb	r3, [r7, #19]
 800403a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80a0 	beq.w	800418a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404a:	2300      	movs	r3, #0
 800404c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800404e:	4b47      	ldr	r3, [pc, #284]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800405e:	2300      	movs	r3, #0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00d      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004064:	4b41      	ldr	r3, [pc, #260]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004068:	4a40      	ldr	r2, [pc, #256]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406e:	6593      	str	r3, [r2, #88]	; 0x58
 8004070:	4b3e      	ldr	r3, [pc, #248]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800407c:	2301      	movs	r3, #1
 800407e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004080:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a3a      	ldr	r2, [pc, #232]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800408c:	f7fd fa0a 	bl	80014a4 <HAL_GetTick>
 8004090:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004092:	e009      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004094:	f7fd fa06 	bl	80014a4 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d902      	bls.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	74fb      	strb	r3, [r7, #19]
        break;
 80040a6:	e005      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040a8:	4b31      	ldr	r3, [pc, #196]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0ef      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d15c      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040ba:	4b2c      	ldr	r3, [pc, #176]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01f      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d019      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040d8:	4b24      	ldr	r3, [pc, #144]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040e4:	4b21      	ldr	r3, [pc, #132]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ea:	4a20      	ldr	r2, [pc, #128]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040f4:	4b1d      	ldr	r3, [pc, #116]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	4a1c      	ldr	r2, [pc, #112]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004104:	4a19      	ldr	r2, [pc, #100]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d016      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004116:	f7fd f9c5 	bl	80014a4 <HAL_GetTick>
 800411a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800411c:	e00b      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fd f9c1 	bl	80014a4 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	; 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d902      	bls.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	74fb      	strb	r3, [r7, #19]
            break;
 8004134:	e006      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004136:	4b0d      	ldr	r3, [pc, #52]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0ec      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10c      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800414a:	4b08      	ldr	r3, [pc, #32]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415a:	4904      	ldr	r1, [pc, #16]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004162:	e009      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004164:	7cfb      	ldrb	r3, [r7, #19]
 8004166:	74bb      	strb	r3, [r7, #18]
 8004168:	e006      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800416a:	bf00      	nop
 800416c:	40021000 	.word	0x40021000
 8004170:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004174:	7cfb      	ldrb	r3, [r7, #19]
 8004176:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004178:	7c7b      	ldrb	r3, [r7, #17]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d105      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800417e:	4b9e      	ldr	r3, [pc, #632]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004182:	4a9d      	ldr	r2, [pc, #628]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004188:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004196:	4b98      	ldr	r3, [pc, #608]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f023 0203 	bic.w	r2, r3, #3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	4994      	ldr	r1, [pc, #592]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041b8:	4b8f      	ldr	r3, [pc, #572]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f023 020c 	bic.w	r2, r3, #12
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	498c      	ldr	r1, [pc, #560]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041da:	4b87      	ldr	r3, [pc, #540]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	4983      	ldr	r1, [pc, #524]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041fc:	4b7e      	ldr	r3, [pc, #504]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	497b      	ldr	r1, [pc, #492]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800421e:	4b76      	ldr	r3, [pc, #472]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422c:	4972      	ldr	r1, [pc, #456]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004240:	4b6d      	ldr	r3, [pc, #436]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004246:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424e:	496a      	ldr	r1, [pc, #424]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004262:	4b65      	ldr	r3, [pc, #404]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004270:	4961      	ldr	r1, [pc, #388]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004284:	4b5c      	ldr	r3, [pc, #368]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004292:	4959      	ldr	r1, [pc, #356]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042a6:	4b54      	ldr	r3, [pc, #336]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b4:	4950      	ldr	r1, [pc, #320]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042c8:	4b4b      	ldr	r3, [pc, #300]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	4948      	ldr	r1, [pc, #288]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042ea:	4b43      	ldr	r3, [pc, #268]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	493f      	ldr	r1, [pc, #252]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d028      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800430c:	4b3a      	ldr	r3, [pc, #232]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800431a:	4937      	ldr	r1, [pc, #220]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800432a:	d106      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800432c:	4b32      	ldr	r3, [pc, #200]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a31      	ldr	r2, [pc, #196]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004336:	60d3      	str	r3, [r2, #12]
 8004338:	e011      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800433e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004342:	d10c      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3304      	adds	r3, #4
 8004348:	2101      	movs	r1, #1
 800434a:	4618      	mov	r0, r3
 800434c:	f000 f8c8 	bl	80044e0 <RCCEx_PLLSAI1_Config>
 8004350:	4603      	mov	r3, r0
 8004352:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800435a:	7cfb      	ldrb	r3, [r7, #19]
 800435c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d028      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800436a:	4b23      	ldr	r3, [pc, #140]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	491f      	ldr	r1, [pc, #124]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004388:	d106      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800438a:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	4a1a      	ldr	r2, [pc, #104]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004394:	60d3      	str	r3, [r2, #12]
 8004396:	e011      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043a0:	d10c      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3304      	adds	r3, #4
 80043a6:	2101      	movs	r1, #1
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f899 	bl	80044e0 <RCCEx_PLLSAI1_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043b2:	7cfb      	ldrb	r3, [r7, #19]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80043b8:	7cfb      	ldrb	r3, [r7, #19]
 80043ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d02b      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d6:	4908      	ldr	r1, [pc, #32]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043e6:	d109      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4a02      	ldr	r2, [pc, #8]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043f2:	60d3      	str	r3, [r2, #12]
 80043f4:	e014      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004404:	d10c      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3304      	adds	r3, #4
 800440a:	2101      	movs	r1, #1
 800440c:	4618      	mov	r0, r3
 800440e:	f000 f867 	bl	80044e0 <RCCEx_PLLSAI1_Config>
 8004412:	4603      	mov	r3, r0
 8004414:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004416:	7cfb      	ldrb	r3, [r7, #19]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800441c:	7cfb      	ldrb	r3, [r7, #19]
 800441e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d02f      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800442c:	4b2b      	ldr	r3, [pc, #172]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800443a:	4928      	ldr	r1, [pc, #160]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800444a:	d10d      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3304      	adds	r3, #4
 8004450:	2102      	movs	r1, #2
 8004452:	4618      	mov	r0, r3
 8004454:	f000 f844 	bl	80044e0 <RCCEx_PLLSAI1_Config>
 8004458:	4603      	mov	r3, r0
 800445a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d014      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004462:	7cfb      	ldrb	r3, [r7, #19]
 8004464:	74bb      	strb	r3, [r7, #18]
 8004466:	e011      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800446c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004470:	d10c      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3320      	adds	r3, #32
 8004476:	2102      	movs	r1, #2
 8004478:	4618      	mov	r0, r3
 800447a:	f000 f925 	bl	80046c8 <RCCEx_PLLSAI2_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004482:	7cfb      	ldrb	r3, [r7, #19]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004498:	4b10      	ldr	r3, [pc, #64]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a6:	490d      	ldr	r1, [pc, #52]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ca:	4904      	ldr	r1, [pc, #16]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40021000 	.word	0x40021000

080044e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ee:	4b75      	ldr	r3, [pc, #468]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d018      	beq.n	800452c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044fa:	4b72      	ldr	r3, [pc, #456]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f003 0203 	and.w	r2, r3, #3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d10d      	bne.n	8004526 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
       ||
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004512:	4b6c      	ldr	r3, [pc, #432]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
       ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d047      	beq.n	80045b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	73fb      	strb	r3, [r7, #15]
 800452a:	e044      	b.n	80045b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b03      	cmp	r3, #3
 8004532:	d018      	beq.n	8004566 <RCCEx_PLLSAI1_Config+0x86>
 8004534:	2b03      	cmp	r3, #3
 8004536:	d825      	bhi.n	8004584 <RCCEx_PLLSAI1_Config+0xa4>
 8004538:	2b01      	cmp	r3, #1
 800453a:	d002      	beq.n	8004542 <RCCEx_PLLSAI1_Config+0x62>
 800453c:	2b02      	cmp	r3, #2
 800453e:	d009      	beq.n	8004554 <RCCEx_PLLSAI1_Config+0x74>
 8004540:	e020      	b.n	8004584 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004542:	4b60      	ldr	r3, [pc, #384]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d11d      	bne.n	800458a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004552:	e01a      	b.n	800458a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004554:	4b5b      	ldr	r3, [pc, #364]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455c:	2b00      	cmp	r3, #0
 800455e:	d116      	bne.n	800458e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004564:	e013      	b.n	800458e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004566:	4b57      	ldr	r3, [pc, #348]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10f      	bne.n	8004592 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004572:	4b54      	ldr	r3, [pc, #336]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004582:	e006      	b.n	8004592 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
      break;
 8004588:	e004      	b.n	8004594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800458a:	bf00      	nop
 800458c:	e002      	b.n	8004594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800458e:	bf00      	nop
 8004590:	e000      	b.n	8004594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004592:	bf00      	nop
    }

    if(status == HAL_OK)
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10d      	bne.n	80045b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800459a:	4b4a      	ldr	r3, [pc, #296]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6819      	ldr	r1, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	430b      	orrs	r3, r1
 80045b0:	4944      	ldr	r1, [pc, #272]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d17d      	bne.n	80046b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045bc:	4b41      	ldr	r3, [pc, #260]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a40      	ldr	r2, [pc, #256]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c8:	f7fc ff6c 	bl	80014a4 <HAL_GetTick>
 80045cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045ce:	e009      	b.n	80045e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045d0:	f7fc ff68 	bl	80014a4 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d902      	bls.n	80045e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	73fb      	strb	r3, [r7, #15]
        break;
 80045e2:	e005      	b.n	80045f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045e4:	4b37      	ldr	r3, [pc, #220]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1ef      	bne.n	80045d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d160      	bne.n	80046b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d111      	bne.n	8004620 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045fc:	4b31      	ldr	r3, [pc, #196]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6892      	ldr	r2, [r2, #8]
 800460c:	0211      	lsls	r1, r2, #8
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68d2      	ldr	r2, [r2, #12]
 8004612:	0912      	lsrs	r2, r2, #4
 8004614:	0452      	lsls	r2, r2, #17
 8004616:	430a      	orrs	r2, r1
 8004618:	492a      	ldr	r1, [pc, #168]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	610b      	str	r3, [r1, #16]
 800461e:	e027      	b.n	8004670 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d112      	bne.n	800464c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004626:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800462e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6892      	ldr	r2, [r2, #8]
 8004636:	0211      	lsls	r1, r2, #8
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6912      	ldr	r2, [r2, #16]
 800463c:	0852      	lsrs	r2, r2, #1
 800463e:	3a01      	subs	r2, #1
 8004640:	0552      	lsls	r2, r2, #21
 8004642:	430a      	orrs	r2, r1
 8004644:	491f      	ldr	r1, [pc, #124]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004646:	4313      	orrs	r3, r2
 8004648:	610b      	str	r3, [r1, #16]
 800464a:	e011      	b.n	8004670 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800464c:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004654:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6892      	ldr	r2, [r2, #8]
 800465c:	0211      	lsls	r1, r2, #8
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6952      	ldr	r2, [r2, #20]
 8004662:	0852      	lsrs	r2, r2, #1
 8004664:	3a01      	subs	r2, #1
 8004666:	0652      	lsls	r2, r2, #25
 8004668:	430a      	orrs	r2, r1
 800466a:	4916      	ldr	r1, [pc, #88]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004670:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a13      	ldr	r2, [pc, #76]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004676:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800467a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467c:	f7fc ff12 	bl	80014a4 <HAL_GetTick>
 8004680:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004682:	e009      	b.n	8004698 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004684:	f7fc ff0e 	bl	80014a4 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d902      	bls.n	8004698 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	73fb      	strb	r3, [r7, #15]
          break;
 8004696:	e005      	b.n	80046a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ef      	beq.n	8004684 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	4904      	ldr	r1, [pc, #16]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000

080046c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046d6:	4b6a      	ldr	r3, [pc, #424]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d018      	beq.n	8004714 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046e2:	4b67      	ldr	r3, [pc, #412]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0203 	and.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d10d      	bne.n	800470e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
       ||
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046fa:	4b61      	ldr	r3, [pc, #388]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	091b      	lsrs	r3, r3, #4
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
       ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d047      	beq.n	800479e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	73fb      	strb	r3, [r7, #15]
 8004712:	e044      	b.n	800479e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d018      	beq.n	800474e <RCCEx_PLLSAI2_Config+0x86>
 800471c:	2b03      	cmp	r3, #3
 800471e:	d825      	bhi.n	800476c <RCCEx_PLLSAI2_Config+0xa4>
 8004720:	2b01      	cmp	r3, #1
 8004722:	d002      	beq.n	800472a <RCCEx_PLLSAI2_Config+0x62>
 8004724:	2b02      	cmp	r3, #2
 8004726:	d009      	beq.n	800473c <RCCEx_PLLSAI2_Config+0x74>
 8004728:	e020      	b.n	800476c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800472a:	4b55      	ldr	r3, [pc, #340]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d11d      	bne.n	8004772 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800473a:	e01a      	b.n	8004772 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800473c:	4b50      	ldr	r3, [pc, #320]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004744:	2b00      	cmp	r3, #0
 8004746:	d116      	bne.n	8004776 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474c:	e013      	b.n	8004776 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800474e:	4b4c      	ldr	r3, [pc, #304]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10f      	bne.n	800477a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800475a:	4b49      	ldr	r3, [pc, #292]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800476a:	e006      	b.n	800477a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      break;
 8004770:	e004      	b.n	800477c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004772:	bf00      	nop
 8004774:	e002      	b.n	800477c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004776:	bf00      	nop
 8004778:	e000      	b.n	800477c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800477a:	bf00      	nop
    }

    if(status == HAL_OK)
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10d      	bne.n	800479e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004782:	4b3f      	ldr	r3, [pc, #252]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6819      	ldr	r1, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	3b01      	subs	r3, #1
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	430b      	orrs	r3, r1
 8004798:	4939      	ldr	r1, [pc, #228]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800479a:	4313      	orrs	r3, r2
 800479c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d167      	bne.n	8004874 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047a4:	4b36      	ldr	r3, [pc, #216]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a35      	ldr	r2, [pc, #212]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b0:	f7fc fe78 	bl	80014a4 <HAL_GetTick>
 80047b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047b6:	e009      	b.n	80047cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047b8:	f7fc fe74 	bl	80014a4 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d902      	bls.n	80047cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	73fb      	strb	r3, [r7, #15]
        break;
 80047ca:	e005      	b.n	80047d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047cc:	4b2c      	ldr	r3, [pc, #176]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ef      	bne.n	80047b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d14a      	bne.n	8004874 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d111      	bne.n	8004808 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047e4:	4b26      	ldr	r3, [pc, #152]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6892      	ldr	r2, [r2, #8]
 80047f4:	0211      	lsls	r1, r2, #8
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68d2      	ldr	r2, [r2, #12]
 80047fa:	0912      	lsrs	r2, r2, #4
 80047fc:	0452      	lsls	r2, r2, #17
 80047fe:	430a      	orrs	r2, r1
 8004800:	491f      	ldr	r1, [pc, #124]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004802:	4313      	orrs	r3, r2
 8004804:	614b      	str	r3, [r1, #20]
 8004806:	e011      	b.n	800482c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004808:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004810:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6892      	ldr	r2, [r2, #8]
 8004818:	0211      	lsls	r1, r2, #8
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6912      	ldr	r2, [r2, #16]
 800481e:	0852      	lsrs	r2, r2, #1
 8004820:	3a01      	subs	r2, #1
 8004822:	0652      	lsls	r2, r2, #25
 8004824:	430a      	orrs	r2, r1
 8004826:	4916      	ldr	r1, [pc, #88]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004828:	4313      	orrs	r3, r2
 800482a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800482c:	4b14      	ldr	r3, [pc, #80]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a13      	ldr	r2, [pc, #76]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7fc fe34 	bl	80014a4 <HAL_GetTick>
 800483c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800483e:	e009      	b.n	8004854 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004840:	f7fc fe30 	bl	80014a4 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d902      	bls.n	8004854 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	73fb      	strb	r3, [r7, #15]
          break;
 8004852:	e005      	b.n	8004860 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004854:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ef      	beq.n	8004840 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004866:	4b06      	ldr	r3, [pc, #24]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004868:	695a      	ldr	r2, [r3, #20]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	4904      	ldr	r1, [pc, #16]	; (8004880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004870:	4313      	orrs	r3, r2
 8004872:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40021000 	.word	0x40021000

08004884 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e095      	b.n	80049c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	d108      	bne.n	80048b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a6:	d009      	beq.n	80048bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	61da      	str	r2, [r3, #28]
 80048ae:	e005      	b.n	80048bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fc fc62 	bl	80011a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048fc:	d902      	bls.n	8004904 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	e002      	b.n	800490a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004908:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004912:	d007      	beq.n	8004924 <HAL_SPI_Init+0xa0>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800491c:	d002      	beq.n	8004924 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004966:	ea42 0103 	orr.w	r1, r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	0c1b      	lsrs	r3, r3, #16
 8004980:	f003 0204 	and.w	r2, r3, #4
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049a0:	ea42 0103 	orr.w	r1, r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b08a      	sub	sp, #40	; 0x28
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
 80049d6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049d8:	2301      	movs	r3, #1
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_SPI_TransmitReceive+0x26>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e1fb      	b.n	8004de8 <HAL_SPI_TransmitReceive+0x41e>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049f8:	f7fc fd54 	bl	80014a4 <HAL_GetTick>
 80049fc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a04:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004a0c:	887b      	ldrh	r3, [r7, #2]
 8004a0e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004a10:	887b      	ldrh	r3, [r7, #2]
 8004a12:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a14:	7efb      	ldrb	r3, [r7, #27]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d00e      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x6e>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a20:	d106      	bne.n	8004a30 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <HAL_SPI_TransmitReceive+0x66>
 8004a2a:	7efb      	ldrb	r3, [r7, #27]
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d003      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004a30:	2302      	movs	r3, #2
 8004a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a36:	e1cd      	b.n	8004dd4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_SPI_TransmitReceive+0x80>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_SPI_TransmitReceive+0x80>
 8004a44:	887b      	ldrh	r3, [r7, #2]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d103      	bne.n	8004a52 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a50:	e1c0      	b.n	8004dd4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d003      	beq.n	8004a66 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2205      	movs	r2, #5
 8004a62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	887a      	ldrh	r2, [r7, #2]
 8004a76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	887a      	ldrh	r2, [r7, #2]
 8004a7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	887a      	ldrh	r2, [r7, #2]
 8004a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	887a      	ldrh	r2, [r7, #2]
 8004a92:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aa8:	d802      	bhi.n	8004ab0 <HAL_SPI_TransmitReceive+0xe6>
 8004aaa:	8a3b      	ldrh	r3, [r7, #16]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d908      	bls.n	8004ac2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004abe:	605a      	str	r2, [r3, #4]
 8004ac0:	e007      	b.n	8004ad2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ad0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004adc:	2b40      	cmp	r3, #64	; 0x40
 8004ade:	d007      	beq.n	8004af0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004af8:	d97c      	bls.n	8004bf4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_SPI_TransmitReceive+0x13e>
 8004b02:	8a7b      	ldrh	r3, [r7, #18]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d169      	bne.n	8004bdc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	881a      	ldrh	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b18:	1c9a      	adds	r2, r3, #2
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b2c:	e056      	b.n	8004bdc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d11b      	bne.n	8004b74 <HAL_SPI_TransmitReceive+0x1aa>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d016      	beq.n	8004b74 <HAL_SPI_TransmitReceive+0x1aa>
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d113      	bne.n	8004b74 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	881a      	ldrh	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	1c9a      	adds	r2, r3, #2
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d11c      	bne.n	8004bbc <HAL_SPI_TransmitReceive+0x1f2>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d016      	beq.n	8004bbc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	b292      	uxth	r2, r2
 8004b9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	1c9a      	adds	r2, r3, #2
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bbc:	f7fc fc72 	bl	80014a4 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d807      	bhi.n	8004bdc <HAL_SPI_TransmitReceive+0x212>
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd2:	d003      	beq.n	8004bdc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004bda:	e0fb      	b.n	8004dd4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1a3      	bne.n	8004b2e <HAL_SPI_TransmitReceive+0x164>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d19d      	bne.n	8004b2e <HAL_SPI_TransmitReceive+0x164>
 8004bf2:	e0df      	b.n	8004db4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_SPI_TransmitReceive+0x23a>
 8004bfc:	8a7b      	ldrh	r3, [r7, #18]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	f040 80cb 	bne.w	8004d9a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d912      	bls.n	8004c34 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	881a      	ldrh	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	1c9a      	adds	r2, r3, #2
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b02      	subs	r3, #2
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c32:	e0b2      	b.n	8004d9a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	7812      	ldrb	r2, [r2, #0]
 8004c40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c5a:	e09e      	b.n	8004d9a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d134      	bne.n	8004cd4 <HAL_SPI_TransmitReceive+0x30a>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d02f      	beq.n	8004cd4 <HAL_SPI_TransmitReceive+0x30a>
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d12c      	bne.n	8004cd4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d912      	bls.n	8004caa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	881a      	ldrh	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	1c9a      	adds	r2, r3, #2
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b02      	subs	r3, #2
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ca8:	e012      	b.n	8004cd0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	330c      	adds	r3, #12
 8004cb4:	7812      	ldrb	r2, [r2, #0]
 8004cb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d148      	bne.n	8004d74 <HAL_SPI_TransmitReceive+0x3aa>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d042      	beq.n	8004d74 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d923      	bls.n	8004d42 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	b292      	uxth	r2, r2
 8004d06:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	1c9a      	adds	r2, r3, #2
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b02      	subs	r3, #2
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d81f      	bhi.n	8004d70 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d3e:	605a      	str	r2, [r3, #4]
 8004d40:	e016      	b.n	8004d70 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f103 020c 	add.w	r2, r3, #12
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	7812      	ldrb	r2, [r2, #0]
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d70:	2301      	movs	r3, #1
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d74:	f7fc fb96 	bl	80014a4 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d803      	bhi.n	8004d8c <HAL_SPI_TransmitReceive+0x3c2>
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8a:	d102      	bne.n	8004d92 <HAL_SPI_TransmitReceive+0x3c8>
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d103      	bne.n	8004d9a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d98:	e01c      	b.n	8004dd4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f47f af5b 	bne.w	8004c5c <HAL_SPI_TransmitReceive+0x292>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f47f af54 	bne.w	8004c5c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f937 	bl	800502c <SPI_EndRxTxTransaction>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d006      	beq.n	8004dd2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	661a      	str	r2, [r3, #96]	; 0x60
 8004dd0:	e000      	b.n	8004dd4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004dd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004de4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3728      	adds	r7, #40	; 0x28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e00:	f7fc fb50 	bl	80014a4 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e08:	1a9b      	subs	r3, r3, r2
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e10:	f7fc fb48 	bl	80014a4 <HAL_GetTick>
 8004e14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e16:	4b39      	ldr	r3, [pc, #228]	; (8004efc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	015b      	lsls	r3, r3, #5
 8004e1c:	0d1b      	lsrs	r3, r3, #20
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	fb02 f303 	mul.w	r3, r2, r3
 8004e24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e26:	e054      	b.n	8004ed2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2e:	d050      	beq.n	8004ed2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e30:	f7fc fb38 	bl	80014a4 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d902      	bls.n	8004e46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d13d      	bne.n	8004ec2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e5e:	d111      	bne.n	8004e84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e68:	d004      	beq.n	8004e74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e72:	d107      	bne.n	8004e84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e8c:	d10f      	bne.n	8004eae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e017      	b.n	8004ef2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4013      	ands	r3, r2
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	bf0c      	ite	eq
 8004ee2:	2301      	moveq	r3, #1
 8004ee4:	2300      	movne	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d19b      	bne.n	8004e28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3720      	adds	r7, #32
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000014 	.word	0x20000014

08004f00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08a      	sub	sp, #40	; 0x28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f12:	f7fc fac7 	bl	80014a4 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	4413      	add	r3, r2
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004f22:	f7fc fabf 	bl	80014a4 <HAL_GetTick>
 8004f26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f30:	4b3d      	ldr	r3, [pc, #244]	; (8005028 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	00da      	lsls	r2, r3, #3
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	0d1b      	lsrs	r3, r3, #20
 8004f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f42:	fb02 f303 	mul.w	r3, r2, r3
 8004f46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f48:	e060      	b.n	800500c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f50:	d107      	bne.n	8004f62 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d104      	bne.n	8004f62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f68:	d050      	beq.n	800500c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f6a:	f7fc fa9b 	bl	80014a4 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d902      	bls.n	8004f80 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d13d      	bne.n	8004ffc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f98:	d111      	bne.n	8004fbe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa2:	d004      	beq.n	8004fae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fac:	d107      	bne.n	8004fbe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc6:	d10f      	bne.n	8004fe8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fe6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e010      	b.n	800501e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	3b01      	subs	r3, #1
 800500a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	4013      	ands	r3, r2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	429a      	cmp	r2, r3
 800501a:	d196      	bne.n	8004f4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3728      	adds	r7, #40	; 0x28
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000014 	.word	0x20000014

0800502c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2200      	movs	r2, #0
 8005040:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f7ff ff5b 	bl	8004f00 <SPI_WaitFifoStateUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005054:	f043 0220 	orr.w	r2, r3, #32
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e027      	b.n	80050b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2200      	movs	r2, #0
 8005068:	2180      	movs	r1, #128	; 0x80
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f7ff fec0 	bl	8004df0 <SPI_WaitFlagStateUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800507a:	f043 0220 	orr.w	r2, r3, #32
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e014      	b.n	80050b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2200      	movs	r2, #0
 800508e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f7ff ff34 	bl	8004f00 <SPI_WaitFifoStateUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d007      	beq.n	80050ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a2:	f043 0220 	orr.w	r2, r3, #32
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e000      	b.n	80050b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e049      	b.n	800515e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fc f8a0 	bl	8001224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f000 fb7a 	bl	80057f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e049      	b.n	800520c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d106      	bne.n	8005192 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f841 	bl	8005214 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3304      	adds	r3, #4
 80051a2:	4619      	mov	r1, r3
 80051a4:	4610      	mov	r0, r2
 80051a6:	f000 fb23 	bl	80057f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d109      	bne.n	800524c <HAL_TIM_PWM_Start+0x24>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	e03c      	b.n	80052c6 <HAL_TIM_PWM_Start+0x9e>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b04      	cmp	r3, #4
 8005250:	d109      	bne.n	8005266 <HAL_TIM_PWM_Start+0x3e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b01      	cmp	r3, #1
 800525c:	bf14      	ite	ne
 800525e:	2301      	movne	r3, #1
 8005260:	2300      	moveq	r3, #0
 8005262:	b2db      	uxtb	r3, r3
 8005264:	e02f      	b.n	80052c6 <HAL_TIM_PWM_Start+0x9e>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b08      	cmp	r3, #8
 800526a:	d109      	bne.n	8005280 <HAL_TIM_PWM_Start+0x58>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	bf14      	ite	ne
 8005278:	2301      	movne	r3, #1
 800527a:	2300      	moveq	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	e022      	b.n	80052c6 <HAL_TIM_PWM_Start+0x9e>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b0c      	cmp	r3, #12
 8005284:	d109      	bne.n	800529a <HAL_TIM_PWM_Start+0x72>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	bf14      	ite	ne
 8005292:	2301      	movne	r3, #1
 8005294:	2300      	moveq	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	e015      	b.n	80052c6 <HAL_TIM_PWM_Start+0x9e>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b10      	cmp	r3, #16
 800529e:	d109      	bne.n	80052b4 <HAL_TIM_PWM_Start+0x8c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	e008      	b.n	80052c6 <HAL_TIM_PWM_Start+0x9e>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	bf14      	ite	ne
 80052c0:	2301      	movne	r3, #1
 80052c2:	2300      	moveq	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e09c      	b.n	8005408 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d104      	bne.n	80052de <HAL_TIM_PWM_Start+0xb6>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052dc:	e023      	b.n	8005326 <HAL_TIM_PWM_Start+0xfe>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_PWM_Start+0xc6>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052ec:	e01b      	b.n	8005326 <HAL_TIM_PWM_Start+0xfe>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d104      	bne.n	80052fe <HAL_TIM_PWM_Start+0xd6>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052fc:	e013      	b.n	8005326 <HAL_TIM_PWM_Start+0xfe>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b0c      	cmp	r3, #12
 8005302:	d104      	bne.n	800530e <HAL_TIM_PWM_Start+0xe6>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800530c:	e00b      	b.n	8005326 <HAL_TIM_PWM_Start+0xfe>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b10      	cmp	r3, #16
 8005312:	d104      	bne.n	800531e <HAL_TIM_PWM_Start+0xf6>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800531c:	e003      	b.n	8005326 <HAL_TIM_PWM_Start+0xfe>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2202      	movs	r2, #2
 8005322:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2201      	movs	r2, #1
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fe68 	bl	8006004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a35      	ldr	r2, [pc, #212]	; (8005410 <HAL_TIM_PWM_Start+0x1e8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d013      	beq.n	8005366 <HAL_TIM_PWM_Start+0x13e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a34      	ldr	r2, [pc, #208]	; (8005414 <HAL_TIM_PWM_Start+0x1ec>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00e      	beq.n	8005366 <HAL_TIM_PWM_Start+0x13e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a32      	ldr	r2, [pc, #200]	; (8005418 <HAL_TIM_PWM_Start+0x1f0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d009      	beq.n	8005366 <HAL_TIM_PWM_Start+0x13e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a31      	ldr	r2, [pc, #196]	; (800541c <HAL_TIM_PWM_Start+0x1f4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d004      	beq.n	8005366 <HAL_TIM_PWM_Start+0x13e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a2f      	ldr	r2, [pc, #188]	; (8005420 <HAL_TIM_PWM_Start+0x1f8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d101      	bne.n	800536a <HAL_TIM_PWM_Start+0x142>
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <HAL_TIM_PWM_Start+0x144>
 800536a:	2300      	movs	r3, #0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d007      	beq.n	8005380 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800537e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a22      	ldr	r2, [pc, #136]	; (8005410 <HAL_TIM_PWM_Start+0x1e8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d01d      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x19e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005392:	d018      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x19e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a22      	ldr	r2, [pc, #136]	; (8005424 <HAL_TIM_PWM_Start+0x1fc>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x19e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a21      	ldr	r2, [pc, #132]	; (8005428 <HAL_TIM_PWM_Start+0x200>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00e      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x19e>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1f      	ldr	r2, [pc, #124]	; (800542c <HAL_TIM_PWM_Start+0x204>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d009      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x19e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a17      	ldr	r2, [pc, #92]	; (8005414 <HAL_TIM_PWM_Start+0x1ec>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d004      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x19e>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a15      	ldr	r2, [pc, #84]	; (8005418 <HAL_TIM_PWM_Start+0x1f0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d115      	bne.n	80053f2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	4b18      	ldr	r3, [pc, #96]	; (8005430 <HAL_TIM_PWM_Start+0x208>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b06      	cmp	r3, #6
 80053d6:	d015      	beq.n	8005404 <HAL_TIM_PWM_Start+0x1dc>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053de:	d011      	beq.n	8005404 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f0:	e008      	b.n	8005404 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e000      	b.n	8005406 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005404:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40012c00 	.word	0x40012c00
 8005414:	40013400 	.word	0x40013400
 8005418:	40014000 	.word	0x40014000
 800541c:	40014400 	.word	0x40014400
 8005420:	40014800 	.word	0x40014800
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	00010007 	.word	0x00010007

08005434 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800544e:	2302      	movs	r3, #2
 8005450:	e0ff      	b.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b14      	cmp	r3, #20
 800545e:	f200 80f0 	bhi.w	8005642 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005462:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005468:	080054bd 	.word	0x080054bd
 800546c:	08005643 	.word	0x08005643
 8005470:	08005643 	.word	0x08005643
 8005474:	08005643 	.word	0x08005643
 8005478:	080054fd 	.word	0x080054fd
 800547c:	08005643 	.word	0x08005643
 8005480:	08005643 	.word	0x08005643
 8005484:	08005643 	.word	0x08005643
 8005488:	0800553f 	.word	0x0800553f
 800548c:	08005643 	.word	0x08005643
 8005490:	08005643 	.word	0x08005643
 8005494:	08005643 	.word	0x08005643
 8005498:	0800557f 	.word	0x0800557f
 800549c:	08005643 	.word	0x08005643
 80054a0:	08005643 	.word	0x08005643
 80054a4:	08005643 	.word	0x08005643
 80054a8:	080055c1 	.word	0x080055c1
 80054ac:	08005643 	.word	0x08005643
 80054b0:	08005643 	.word	0x08005643
 80054b4:	08005643 	.word	0x08005643
 80054b8:	08005601 	.word	0x08005601
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fa2e 	bl	8005924 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0208 	orr.w	r2, r2, #8
 80054d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0204 	bic.w	r2, r2, #4
 80054e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6999      	ldr	r1, [r3, #24]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	619a      	str	r2, [r3, #24]
      break;
 80054fa:	e0a5      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fa9e 	bl	8005a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6999      	ldr	r1, [r3, #24]
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	021a      	lsls	r2, r3, #8
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	619a      	str	r2, [r3, #24]
      break;
 800553c:	e084      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fb07 	bl	8005b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0208 	orr.w	r2, r2, #8
 8005558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0204 	bic.w	r2, r2, #4
 8005568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69d9      	ldr	r1, [r3, #28]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	61da      	str	r2, [r3, #28]
      break;
 800557c:	e064      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68b9      	ldr	r1, [r7, #8]
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fb6f 	bl	8005c68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69d9      	ldr	r1, [r3, #28]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	021a      	lsls	r2, r3, #8
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	61da      	str	r2, [r3, #28]
      break;
 80055be:	e043      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fbb8 	bl	8005d3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0208 	orr.w	r2, r2, #8
 80055da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0204 	bic.w	r2, r2, #4
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691a      	ldr	r2, [r3, #16]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055fe:	e023      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fbfc 	bl	8005e04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800561a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	021a      	lsls	r2, r3, #8
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005640:	e002      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	75fb      	strb	r3, [r7, #23]
      break;
 8005646:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005650:	7dfb      	ldrb	r3, [r7, #23]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop

0800565c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_TIM_ConfigClockSource+0x1c>
 8005674:	2302      	movs	r3, #2
 8005676:	e0b6      	b.n	80057e6 <HAL_TIM_ConfigClockSource+0x18a>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005696:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800569a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b4:	d03e      	beq.n	8005734 <HAL_TIM_ConfigClockSource+0xd8>
 80056b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ba:	f200 8087 	bhi.w	80057cc <HAL_TIM_ConfigClockSource+0x170>
 80056be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c2:	f000 8086 	beq.w	80057d2 <HAL_TIM_ConfigClockSource+0x176>
 80056c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ca:	d87f      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x170>
 80056cc:	2b70      	cmp	r3, #112	; 0x70
 80056ce:	d01a      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0xaa>
 80056d0:	2b70      	cmp	r3, #112	; 0x70
 80056d2:	d87b      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x170>
 80056d4:	2b60      	cmp	r3, #96	; 0x60
 80056d6:	d050      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x11e>
 80056d8:	2b60      	cmp	r3, #96	; 0x60
 80056da:	d877      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x170>
 80056dc:	2b50      	cmp	r3, #80	; 0x50
 80056de:	d03c      	beq.n	800575a <HAL_TIM_ConfigClockSource+0xfe>
 80056e0:	2b50      	cmp	r3, #80	; 0x50
 80056e2:	d873      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x170>
 80056e4:	2b40      	cmp	r3, #64	; 0x40
 80056e6:	d058      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x13e>
 80056e8:	2b40      	cmp	r3, #64	; 0x40
 80056ea:	d86f      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x170>
 80056ec:	2b30      	cmp	r3, #48	; 0x30
 80056ee:	d064      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15e>
 80056f0:	2b30      	cmp	r3, #48	; 0x30
 80056f2:	d86b      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x170>
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d060      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15e>
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d867      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x170>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d05c      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15e>
 8005700:	2b10      	cmp	r3, #16
 8005702:	d05a      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15e>
 8005704:	e062      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6899      	ldr	r1, [r3, #8]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f000 fc55 	bl	8005fc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005728:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	609a      	str	r2, [r3, #8]
      break;
 8005732:	e04f      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	6899      	ldr	r1, [r3, #8]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f000 fc3e 	bl	8005fc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005756:	609a      	str	r2, [r3, #8]
      break;
 8005758:	e03c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6859      	ldr	r1, [r3, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	461a      	mov	r2, r3
 8005768:	f000 fbb2 	bl	8005ed0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2150      	movs	r1, #80	; 0x50
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fc0b 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 8005778:	e02c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6859      	ldr	r1, [r3, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	461a      	mov	r2, r3
 8005788:	f000 fbd1 	bl	8005f2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2160      	movs	r1, #96	; 0x60
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fbfb 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 8005798:	e01c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6859      	ldr	r1, [r3, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f000 fb92 	bl	8005ed0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2140      	movs	r1, #64	; 0x40
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fbeb 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 80057b8:	e00c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4619      	mov	r1, r3
 80057c4:	4610      	mov	r0, r2
 80057c6:	f000 fbe2 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 80057ca:	e003      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
      break;
 80057d0:	e000      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80057d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a40      	ldr	r2, [pc, #256]	; (8005904 <TIM_Base_SetConfig+0x114>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d013      	beq.n	8005830 <TIM_Base_SetConfig+0x40>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580e:	d00f      	beq.n	8005830 <TIM_Base_SetConfig+0x40>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a3d      	ldr	r2, [pc, #244]	; (8005908 <TIM_Base_SetConfig+0x118>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00b      	beq.n	8005830 <TIM_Base_SetConfig+0x40>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a3c      	ldr	r2, [pc, #240]	; (800590c <TIM_Base_SetConfig+0x11c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d007      	beq.n	8005830 <TIM_Base_SetConfig+0x40>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a3b      	ldr	r2, [pc, #236]	; (8005910 <TIM_Base_SetConfig+0x120>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_Base_SetConfig+0x40>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a3a      	ldr	r2, [pc, #232]	; (8005914 <TIM_Base_SetConfig+0x124>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d108      	bne.n	8005842 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a2f      	ldr	r2, [pc, #188]	; (8005904 <TIM_Base_SetConfig+0x114>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01f      	beq.n	800588a <TIM_Base_SetConfig+0x9a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005850:	d01b      	beq.n	800588a <TIM_Base_SetConfig+0x9a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2c      	ldr	r2, [pc, #176]	; (8005908 <TIM_Base_SetConfig+0x118>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d017      	beq.n	800588a <TIM_Base_SetConfig+0x9a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2b      	ldr	r2, [pc, #172]	; (800590c <TIM_Base_SetConfig+0x11c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <TIM_Base_SetConfig+0x9a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a2a      	ldr	r2, [pc, #168]	; (8005910 <TIM_Base_SetConfig+0x120>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00f      	beq.n	800588a <TIM_Base_SetConfig+0x9a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a29      	ldr	r2, [pc, #164]	; (8005914 <TIM_Base_SetConfig+0x124>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00b      	beq.n	800588a <TIM_Base_SetConfig+0x9a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a28      	ldr	r2, [pc, #160]	; (8005918 <TIM_Base_SetConfig+0x128>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d007      	beq.n	800588a <TIM_Base_SetConfig+0x9a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a27      	ldr	r2, [pc, #156]	; (800591c <TIM_Base_SetConfig+0x12c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d003      	beq.n	800588a <TIM_Base_SetConfig+0x9a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a26      	ldr	r2, [pc, #152]	; (8005920 <TIM_Base_SetConfig+0x130>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d108      	bne.n	800589c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a10      	ldr	r2, [pc, #64]	; (8005904 <TIM_Base_SetConfig+0x114>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00f      	beq.n	80058e8 <TIM_Base_SetConfig+0xf8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a12      	ldr	r2, [pc, #72]	; (8005914 <TIM_Base_SetConfig+0x124>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <TIM_Base_SetConfig+0xf8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a11      	ldr	r2, [pc, #68]	; (8005918 <TIM_Base_SetConfig+0x128>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_Base_SetConfig+0xf8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a10      	ldr	r2, [pc, #64]	; (800591c <TIM_Base_SetConfig+0x12c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_Base_SetConfig+0xf8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a0f      	ldr	r2, [pc, #60]	; (8005920 <TIM_Base_SetConfig+0x130>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d103      	bne.n	80058f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	615a      	str	r2, [r3, #20]
}
 80058f6:	bf00      	nop
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40012c00 	.word	0x40012c00
 8005908:	40000400 	.word	0x40000400
 800590c:	40000800 	.word	0x40000800
 8005910:	40000c00 	.word	0x40000c00
 8005914:	40013400 	.word	0x40013400
 8005918:	40014000 	.word	0x40014000
 800591c:	40014400 	.word	0x40014400
 8005920:	40014800 	.word	0x40014800

08005924 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f023 0201 	bic.w	r2, r3, #1
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0303 	bic.w	r3, r3, #3
 800595e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f023 0302 	bic.w	r3, r3, #2
 8005970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a2c      	ldr	r2, [pc, #176]	; (8005a30 <TIM_OC1_SetConfig+0x10c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00f      	beq.n	80059a4 <TIM_OC1_SetConfig+0x80>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a2b      	ldr	r2, [pc, #172]	; (8005a34 <TIM_OC1_SetConfig+0x110>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00b      	beq.n	80059a4 <TIM_OC1_SetConfig+0x80>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a2a      	ldr	r2, [pc, #168]	; (8005a38 <TIM_OC1_SetConfig+0x114>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d007      	beq.n	80059a4 <TIM_OC1_SetConfig+0x80>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a29      	ldr	r2, [pc, #164]	; (8005a3c <TIM_OC1_SetConfig+0x118>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_OC1_SetConfig+0x80>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a28      	ldr	r2, [pc, #160]	; (8005a40 <TIM_OC1_SetConfig+0x11c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d10c      	bne.n	80059be <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f023 0308 	bic.w	r3, r3, #8
 80059aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f023 0304 	bic.w	r3, r3, #4
 80059bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <TIM_OC1_SetConfig+0x10c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00f      	beq.n	80059e6 <TIM_OC1_SetConfig+0xc2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a1a      	ldr	r2, [pc, #104]	; (8005a34 <TIM_OC1_SetConfig+0x110>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00b      	beq.n	80059e6 <TIM_OC1_SetConfig+0xc2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a19      	ldr	r2, [pc, #100]	; (8005a38 <TIM_OC1_SetConfig+0x114>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d007      	beq.n	80059e6 <TIM_OC1_SetConfig+0xc2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a18      	ldr	r2, [pc, #96]	; (8005a3c <TIM_OC1_SetConfig+0x118>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_OC1_SetConfig+0xc2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a17      	ldr	r2, [pc, #92]	; (8005a40 <TIM_OC1_SetConfig+0x11c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d111      	bne.n	8005a0a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	621a      	str	r2, [r3, #32]
}
 8005a24:	bf00      	nop
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	40012c00 	.word	0x40012c00
 8005a34:	40013400 	.word	0x40013400
 8005a38:	40014000 	.word	0x40014000
 8005a3c:	40014400 	.word	0x40014400
 8005a40:	40014800 	.word	0x40014800

08005a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f023 0210 	bic.w	r2, r3, #16
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f023 0320 	bic.w	r3, r3, #32
 8005a92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a28      	ldr	r2, [pc, #160]	; (8005b44 <TIM_OC2_SetConfig+0x100>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_OC2_SetConfig+0x6c>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a27      	ldr	r2, [pc, #156]	; (8005b48 <TIM_OC2_SetConfig+0x104>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d10d      	bne.n	8005acc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <TIM_OC2_SetConfig+0x100>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00f      	beq.n	8005af4 <TIM_OC2_SetConfig+0xb0>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <TIM_OC2_SetConfig+0x104>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00b      	beq.n	8005af4 <TIM_OC2_SetConfig+0xb0>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a1b      	ldr	r2, [pc, #108]	; (8005b4c <TIM_OC2_SetConfig+0x108>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d007      	beq.n	8005af4 <TIM_OC2_SetConfig+0xb0>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a1a      	ldr	r2, [pc, #104]	; (8005b50 <TIM_OC2_SetConfig+0x10c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_OC2_SetConfig+0xb0>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a19      	ldr	r2, [pc, #100]	; (8005b54 <TIM_OC2_SetConfig+0x110>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d113      	bne.n	8005b1c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40012c00 	.word	0x40012c00
 8005b48:	40013400 	.word	0x40013400
 8005b4c:	40014000 	.word	0x40014000
 8005b50:	40014400 	.word	0x40014400
 8005b54:	40014800 	.word	0x40014800

08005b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a27      	ldr	r2, [pc, #156]	; (8005c54 <TIM_OC3_SetConfig+0xfc>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d003      	beq.n	8005bc2 <TIM_OC3_SetConfig+0x6a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a26      	ldr	r2, [pc, #152]	; (8005c58 <TIM_OC3_SetConfig+0x100>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d10d      	bne.n	8005bde <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1c      	ldr	r2, [pc, #112]	; (8005c54 <TIM_OC3_SetConfig+0xfc>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00f      	beq.n	8005c06 <TIM_OC3_SetConfig+0xae>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <TIM_OC3_SetConfig+0x100>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00b      	beq.n	8005c06 <TIM_OC3_SetConfig+0xae>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a1a      	ldr	r2, [pc, #104]	; (8005c5c <TIM_OC3_SetConfig+0x104>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d007      	beq.n	8005c06 <TIM_OC3_SetConfig+0xae>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a19      	ldr	r2, [pc, #100]	; (8005c60 <TIM_OC3_SetConfig+0x108>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d003      	beq.n	8005c06 <TIM_OC3_SetConfig+0xae>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a18      	ldr	r2, [pc, #96]	; (8005c64 <TIM_OC3_SetConfig+0x10c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d113      	bne.n	8005c2e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	621a      	str	r2, [r3, #32]
}
 8005c48:	bf00      	nop
 8005c4a:	371c      	adds	r7, #28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	40012c00 	.word	0x40012c00
 8005c58:	40013400 	.word	0x40013400
 8005c5c:	40014000 	.word	0x40014000
 8005c60:	40014400 	.word	0x40014400
 8005c64:	40014800 	.word	0x40014800

08005c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	021b      	lsls	r3, r3, #8
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	031b      	lsls	r3, r3, #12
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a18      	ldr	r2, [pc, #96]	; (8005d28 <TIM_OC4_SetConfig+0xc0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00f      	beq.n	8005cec <TIM_OC4_SetConfig+0x84>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a17      	ldr	r2, [pc, #92]	; (8005d2c <TIM_OC4_SetConfig+0xc4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00b      	beq.n	8005cec <TIM_OC4_SetConfig+0x84>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a16      	ldr	r2, [pc, #88]	; (8005d30 <TIM_OC4_SetConfig+0xc8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d007      	beq.n	8005cec <TIM_OC4_SetConfig+0x84>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a15      	ldr	r2, [pc, #84]	; (8005d34 <TIM_OC4_SetConfig+0xcc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_OC4_SetConfig+0x84>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a14      	ldr	r2, [pc, #80]	; (8005d38 <TIM_OC4_SetConfig+0xd0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d109      	bne.n	8005d00 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	019b      	lsls	r3, r3, #6
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40013400 	.word	0x40013400
 8005d30:	40014000 	.word	0x40014000
 8005d34:	40014400 	.word	0x40014400
 8005d38:	40014800 	.word	0x40014800

08005d3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a17      	ldr	r2, [pc, #92]	; (8005df0 <TIM_OC5_SetConfig+0xb4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00f      	beq.n	8005db6 <TIM_OC5_SetConfig+0x7a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a16      	ldr	r2, [pc, #88]	; (8005df4 <TIM_OC5_SetConfig+0xb8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00b      	beq.n	8005db6 <TIM_OC5_SetConfig+0x7a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a15      	ldr	r2, [pc, #84]	; (8005df8 <TIM_OC5_SetConfig+0xbc>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d007      	beq.n	8005db6 <TIM_OC5_SetConfig+0x7a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a14      	ldr	r2, [pc, #80]	; (8005dfc <TIM_OC5_SetConfig+0xc0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d003      	beq.n	8005db6 <TIM_OC5_SetConfig+0x7a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a13      	ldr	r2, [pc, #76]	; (8005e00 <TIM_OC5_SetConfig+0xc4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d109      	bne.n	8005dca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	021b      	lsls	r3, r3, #8
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	621a      	str	r2, [r3, #32]
}
 8005de4:	bf00      	nop
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40013400 	.word	0x40013400
 8005df8:	40014000 	.word	0x40014000
 8005dfc:	40014400 	.word	0x40014400
 8005e00:	40014800 	.word	0x40014800

08005e04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	021b      	lsls	r3, r3, #8
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	051b      	lsls	r3, r3, #20
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a18      	ldr	r2, [pc, #96]	; (8005ebc <TIM_OC6_SetConfig+0xb8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00f      	beq.n	8005e80 <TIM_OC6_SetConfig+0x7c>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a17      	ldr	r2, [pc, #92]	; (8005ec0 <TIM_OC6_SetConfig+0xbc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00b      	beq.n	8005e80 <TIM_OC6_SetConfig+0x7c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a16      	ldr	r2, [pc, #88]	; (8005ec4 <TIM_OC6_SetConfig+0xc0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d007      	beq.n	8005e80 <TIM_OC6_SetConfig+0x7c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a15      	ldr	r2, [pc, #84]	; (8005ec8 <TIM_OC6_SetConfig+0xc4>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d003      	beq.n	8005e80 <TIM_OC6_SetConfig+0x7c>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a14      	ldr	r2, [pc, #80]	; (8005ecc <TIM_OC6_SetConfig+0xc8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d109      	bne.n	8005e94 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	029b      	lsls	r3, r3, #10
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40012c00 	.word	0x40012c00
 8005ec0:	40013400 	.word	0x40013400
 8005ec4:	40014000 	.word	0x40014000
 8005ec8:	40014400 	.word	0x40014400
 8005ecc:	40014800 	.word	0x40014800

08005ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	f023 0201 	bic.w	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f023 030a 	bic.w	r3, r3, #10
 8005f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	621a      	str	r2, [r3, #32]
}
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b087      	sub	sp, #28
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f023 0210 	bic.w	r2, r3, #16
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	031b      	lsls	r3, r3, #12
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b085      	sub	sp, #20
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f043 0307 	orr.w	r3, r3, #7
 8005fb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	021a      	lsls	r2, r3, #8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	609a      	str	r2, [r3, #8]
}
 8005ff8:	bf00      	nop
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	2201      	movs	r2, #1
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a1a      	ldr	r2, [r3, #32]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	43db      	mvns	r3, r3
 8006026:	401a      	ands	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1a      	ldr	r2, [r3, #32]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 031f 	and.w	r3, r3, #31
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	fa01 f303 	lsl.w	r3, r1, r3
 800603c:	431a      	orrs	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	621a      	str	r2, [r3, #32]
}
 8006042:	bf00      	nop
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
	...

08006050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006064:	2302      	movs	r3, #2
 8006066:	e068      	b.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a2e      	ldr	r2, [pc, #184]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d004      	beq.n	800609c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a2d      	ldr	r2, [pc, #180]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d108      	bne.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d01d      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060da:	d018      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a1b      	ldr	r2, [pc, #108]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d013      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1a      	ldr	r2, [pc, #104]	; (8006154 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00e      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a18      	ldr	r2, [pc, #96]	; (8006158 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a13      	ldr	r2, [pc, #76]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d004      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a14      	ldr	r2, [pc, #80]	; (800615c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d10c      	bne.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4313      	orrs	r3, r2
 800611e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40012c00 	.word	0x40012c00
 800614c:	40013400 	.word	0x40013400
 8006150:	40000400 	.word	0x40000400
 8006154:	40000800 	.word	0x40000800
 8006158:	40000c00 	.word	0x40000c00
 800615c:	40014000 	.word	0x40014000

08006160 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006178:	2302      	movs	r3, #2
 800617a:	e065      	b.n	8006248 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	041b      	lsls	r3, r3, #16
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a16      	ldr	r2, [pc, #88]	; (8006254 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d004      	beq.n	800620a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a14      	ldr	r2, [pc, #80]	; (8006258 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d115      	bne.n	8006236 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	051b      	lsls	r3, r3, #20
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	4313      	orrs	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	40012c00 	.word	0x40012c00
 8006258:	40013400 	.word	0x40013400

0800625c <__libc_init_array>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	4d0d      	ldr	r5, [pc, #52]	; (8006294 <__libc_init_array+0x38>)
 8006260:	4c0d      	ldr	r4, [pc, #52]	; (8006298 <__libc_init_array+0x3c>)
 8006262:	1b64      	subs	r4, r4, r5
 8006264:	10a4      	asrs	r4, r4, #2
 8006266:	2600      	movs	r6, #0
 8006268:	42a6      	cmp	r6, r4
 800626a:	d109      	bne.n	8006280 <__libc_init_array+0x24>
 800626c:	4d0b      	ldr	r5, [pc, #44]	; (800629c <__libc_init_array+0x40>)
 800626e:	4c0c      	ldr	r4, [pc, #48]	; (80062a0 <__libc_init_array+0x44>)
 8006270:	f000 f820 	bl	80062b4 <_init>
 8006274:	1b64      	subs	r4, r4, r5
 8006276:	10a4      	asrs	r4, r4, #2
 8006278:	2600      	movs	r6, #0
 800627a:	42a6      	cmp	r6, r4
 800627c:	d105      	bne.n	800628a <__libc_init_array+0x2e>
 800627e:	bd70      	pop	{r4, r5, r6, pc}
 8006280:	f855 3b04 	ldr.w	r3, [r5], #4
 8006284:	4798      	blx	r3
 8006286:	3601      	adds	r6, #1
 8006288:	e7ee      	b.n	8006268 <__libc_init_array+0xc>
 800628a:	f855 3b04 	ldr.w	r3, [r5], #4
 800628e:	4798      	blx	r3
 8006290:	3601      	adds	r6, #1
 8006292:	e7f2      	b.n	800627a <__libc_init_array+0x1e>
 8006294:	0800630c 	.word	0x0800630c
 8006298:	0800630c 	.word	0x0800630c
 800629c:	0800630c 	.word	0x0800630c
 80062a0:	08006310 	.word	0x08006310

080062a4 <memset>:
 80062a4:	4402      	add	r2, r0
 80062a6:	4603      	mov	r3, r0
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d100      	bne.n	80062ae <memset+0xa>
 80062ac:	4770      	bx	lr
 80062ae:	f803 1b01 	strb.w	r1, [r3], #1
 80062b2:	e7f9      	b.n	80062a8 <memset+0x4>

080062b4 <_init>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	bf00      	nop
 80062b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ba:	bc08      	pop	{r3}
 80062bc:	469e      	mov	lr, r3
 80062be:	4770      	bx	lr

080062c0 <_fini>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	bf00      	nop
 80062c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c6:	bc08      	pop	{r3}
 80062c8:	469e      	mov	lr, r3
 80062ca:	4770      	bx	lr
